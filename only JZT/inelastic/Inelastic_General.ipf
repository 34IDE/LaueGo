#pragma rtGlobals=1		// Use modern global access method.#pragma ModuleName=InelasticGen#pragma version = 2.53#include "inelasticUtility", version>=1.4#include "specMore"#include "JZT-analysis"#include  "Xray", version>=2.1#include "Utility_JZT", version>=2.51#include "epics"//#include "JelliumResponse"////	with version 2.0, use s(q,w) in eV^-1 nm^-3    (was using eV^-1 Å^-3)////	version 2.3 (October 9, 2005) added correction for position of elastic line in 1st moment calculation////	version 2.4 (April 2, 2006) changed graph names from 1/Å to 1/nm. Then now end in nm, not Ang////	version 2.5 (Dec 17, 2006) added a filter correction to CombineSpecScans(), the filters are now after the Io due to removal of USAXS//								also removed the annoying alerts about harmonic and dead time correct when using UpdateListOfScans()Menu "dataFiles"	"Update A Range of Scans", UpdateListOfScans("")	"  ReadIn a RangeOf Scans",ReadInRangeOfScans("",0)	"Renormalize All or One", ReNormAll("",NaN,"")	"Dump All Combined Scans",DumpAllCombinedScans()	"-"	"Read Many Overnite Scans", ReadInManyOverniteScans(NaN,NaN,NaN)	"Elapsed time for scans", ElapsedTimeForScans("")//	"Apply CaF2 Bkg", ApplyCaF2Bkg($"","")//	"Apply Flipped Bkg", ApplyFlippedBkg($"",0)	"Correction Factor Compute",CorrectionFactorElement("",NaN,NaN)//	"Find Elastic Center Peak", FindElasticCenterPeak("")	"Moment Of Aluminum", MomentOfAluminum($"",NaN)	"-"	"Re-Set CombineScanList",ReSet_combineScanList()	"Combine spec scans", CombineSpecScans("")//	"Load a Range of Scans", LoadRangeOfSpecScansLocal("","","")	"Display a Combined Plot",DisplayCombinedPlot($"")	"Draw all Q Graphs", DrawAll_Q_Graphs("",1)	"   Reset Graph LIst", ResetGraphLIst(NaN)	"Center All Elastic Lines on Graph",CenterPlotsOnGraph()	"Show Avaiable Q's",ListAvailableQs()	"Choose new name of data file", ReTargetDataFile("")//	"    FTP data [use NFS]", FTPdata("")//	"Check For Double Notes in Bkg",CheckDoubleNoteInBkg(0)	"Init new Igor File", InitInelasticIgorFile(0)EndMenu "Macros"//	"Renormalize All or One", ReNormAll("",NaN,"")	"Center All plots on Elastic Line",MakeCenteredEnergies()//	"Read Many Overnite Scans", ReadInManyOverniteScans(NaN,NaN,NaN)//	"Elapsed time for scans", ElapsedTimeForScans("")//	"Apply CaF2 Bkg", ApplyCaF2Bkg($"","")//	"Apply Flipped Bkg", ApplyFlippedBkg($"",0)//	"Correction Factor Compute",CorrectionFactorElement("",NaN,NaN)//	"Find Elastic Center Peak", FindElasticCenterPeak("")//	"Moment Of Aluminum", MomentOfAluminum($"",NaN)EndProc Examples()	graphList = "Ni_13F"	•FindElasticCenterPeak("root:scan_126_131,root:scan_132_137,root:scan_138_143,root:scan_144_149,root:scan_150_155,root:scan_156_161")  	•graphList = "135kF;15kF;16kF;2kF;21kF;23kF;25kF;1kF;12kF;15AkF;05kF;071kF 135AkF;12AkF;16AkF;23AkF;21AkF;2AkF;013_2kF;013_16kF;"	•graphList = "135kF;15kF;16kF;2kF;21kF;23kF;25kF;1kF;12kF;15AkF;15AkF_avg;"	•graphList += "05kF;071kF;135AkF;12AkF;16AkF;23AkF;21AkF;2AkF;"	•graphList += "013_2kF;013_16kF;013_2AkF;013_2kFavg;013_16AkF;013_16kFavg;"	•graphList += "013_135kF;013_21kF;013_21AkF;013_135AkF;013_12kF;013_12AkF"	•ReadInRangeOfScans("181-195",1)  ;  CombineSpecScans("181-195")	  FTP download: url="ftp://ord.uni.aps.anl.gov/home/tischler/data/al3"; path="Macintosh HD:home:tischler:inelastic:Al-UNICAT:raw:al3"	  #191   dE_eV;Energy;DCM_theta;DCM_enc;ID33_E;Epoch_;Det_top;pin;I0;I00;harmonic;seconds;Det_bot;     13 columns      7 points	  #192   dE_eV;Energy;DCM_theta;DCM_enc;ID33_E;Epoch_;Det_top;pin;I0;I00;harmonic;seconds;Det_bot;     13 columns      11 points	  #193   dE_eV;Energy;DCM_theta;DCM_enc;ID33_E;Epoch_;Det_top;pin;I0;I00;harmonic;seconds;Det_bot;     13 columns      59 points	  #194   dE_eV;Energy;DCM_theta;DCM_enc;ID33_E;Epoch_;Det_top;pin;I0;I00;harmonic;seconds;Det_bot;     13 columns      41 points	  #195   dE_eV;Energy;DCM_theta;DCM_enc;ID33_E;Epoch_;Det_top;pin;I0;I00;harmonic;seconds;Det_bot;     13 columns      4 points	•DrawAll_QkF_Graphs("15AkF_avg",1)EndMacroWindow Layout_top() : Layout	PauseUpdate; Silent 1	String gname=StringFromList(0, WinList("*",";", "WIN:"))	String command="Layout/C=1/W=(5,42,506,526) "+gname+"(72,72,387,292)/O=1"	Execute command	TextBox/N=text0/O=90/F=0/S=3/A=LB/X=8.00/Y=72.18 "\\Z16     Arbitrary Units     "EndMacro// this routine checks for double notes that occured in DetScaledBkg (due to a bug), if called with doIt==4, this also fixes themFunction CheckDoubleNoteInBkg(doIt)	Variable doIt				// doit==4  does it, otherwise just test for doubles	String combineScanList = StrVarOrDefault("root:Packages:inelasticUtility:combineScanList","")	if (strlen(combineScanList)<1)		Abort "CheckDoubleNoteInBkg() only works when 'combineScanList' has been defined"	endif	String range, fldr, swav, noteStr	Variable i=0,j	do		range = StringFromList(i,combineScanList)		if (strlen(range)<1)			break							// done, checked all elements in combineScanList 		endif		sprintf swav, "root:scan_%d_%d:DetScaledBkg",str2num(range),lastInRange(range)		if (exists(swav)!=1)			DoAlert 0,  "'"+swav+"' does not exist"			i += 1			continue		endif		Wave wav=$swav		noteStr = note(wav)		j = strsearch(noteStr,"\r",0)		if (j>0 && doit==4)			print "fixing double note string in ",swav			Note/K wav			Note wav, noteStr[0,j-1]		elseif (j>0)			DoAlert 0, "found a double note in DetScaledBkg"			print "found a double note in ",swav			print " so run    CheckDoubleNoteInBkg(4)     to fix these up"			return 1		endif		i += 1	while(1)	if (doit!=4)		print "no double notes found"	endifEndFunction DumpAllCombinedScans()	String range, fldr	String combineScanList = StrVarOrDefault("root:Packages:inelasticUtility:combineScanList","")	if (strlen(combineScanList)<1)		Abort "DumpCombinedScans() only works when 'combineScanList' has been defined"	endif	String fname=IgorInfo(1)+"_dump.txt"	Variable refNum	Open /C="R*ch"/P=home/T="TEXT" refNum as fname	fprintf refNum,"From Igor Experiment '%s',  dumped  %s,  %s\r\r\r\r",IgorInfo(1),date(),time()	String str,sdE, sy, notestr=""	Variable i1,i2, i=0,j, chi	do		range = StringFromList(i,combineScanList)		i += 1		if (strlen(range)<1)			break							// done, checked all elements in combineScanList 		endif		i1 = str2num(range)		i2 = lastInRange(range)		sprintf fldr, "root:scan_%d_%d:",i1,i2		if (!DataFolderExists(fldr))			DoAlert 0, "Folder '"+fldr+"' does not exist"			continue		endif		sdE = fldr+"dE"		sy = fldr+"DetScaledB"		if (exists(sy)!=1)			sy = fldr+"DetScaled"		endif		if (exists(sy)!=1 || exists(sdE)!=1)			DoAlert 0, "for folder '"+fldr+"' DetScaled or dE does not exist"			continue		endif		Wave dE = $sdE		Wave yy = $sy		noteStr = note(yy)		str = StringByKey("DATAFILE", noteStr,"=")		if (strlen(str)>1)			fprintf refNum,"DATAFILE=%s;",str		endif		str = StringByKey("DATE", noteStr,"=")		if (strlen(str)>1)			fprintf refNum,"DATE=%s;",str		endif		str = StringByKey("range", noteStr,"=")		if (strlen(str)>0)			fprintf refNum,"range=%s;",str			chi = specInfo(str2num(str),"chi")			if (abs(90-chi)>.3)				fprintf refNum,"chi=%.2f;",chi			endif		endif		str = StringByKey("Q_nm", noteStr,"=")						// try for Q in (1/nm)		if (strlen(str)>0)			fprintf refNum,"Q_nm=%s;",str		else			str = StringByKey("Q_Angstrom", noteStr,"=")				// if (Q not in (1/nm), try for (1/Å)			if (strlen(str)>0)				fprintf refNum,"Q_nm=%g;",str2num(str)*10	// but save Q in (1/nm)			endif		endif		str=directionOfScan(NumberByKey("SCAN_N", noteStr,"="))		if (strlen(str)>0)			fprintf refNum,"Q_direction=(%s);",str		endif		if (SealedIonChamber(NumberByKey("EPOCH",noteStr,"="))!=1)			fprintf refNum,"ionChamber=UNsealed;"		endif		str = StringByKey("COMMENT", noteStr,"=")		if (strlen(str)>1)			fprintf refNum,"COMMENT=%s;",str		endif		fprintf refNum,"\r"		Variable scale = NumberByKey("scaleFactor", noteStr)		if (scale==1 || numtype(scale))			fprintf refNum,"dE[eV]	I/Io\r"		else//			fprintf refNum,"dE[eV]	S(q,w)[eV^-1 Angstrom^-3]\r"			fprintf refNum,"dE[eV]	S(q,w)[eV^-1 nm^-3]\r"		endif		Variable N=numpnts(dE)		for (j=0;j<N;j+=1)			fprintf refNum,"%g\t%g\r",dE[j],yy[j]		endfor		fprintf refNum,"\r\r"	while(1)	Close refNumEndStatic Function SealedIonChamber(epoch)	Variable epoch										// on input epoch is the LINUX epoch	epoch += Epoch_spec_Igor							// change to igor counting of seconds from LINUX	// changed to sealed ion chamber Aug 26, 2002 at 15:00:00 (before is bad, after is good)	Variable changeTime = (date2secs(2002,8,26)+15*3600)	if (epoch<changeTime)		return 0	elseif (epoch>=changeTime)		return 1	else		return NaN	endifEndFunction MakeCenteredEnergies()	String range, fldr, fldrSav= GetDataFolder(1)	String combineScanList = StrVarOrDefault("root:Packages:inelasticUtility:combineScanList","")	if (strlen(combineScanList)<1)		Abort "MakeCenteredEnergies() only works when 'combineScanList' has been defined"	endif	String sdE,sdE0	Variable i1,i2, i=0	do		range = StringFromList(i,combineScanList)		if (strlen(range)<1)			break							// done, checked all elements in combineScanList 		endif		i1 = str2num(range)		i2 = lastInRange(range)		sprintf fldr, "root:scan_%d_%d",i1,i2		if (!DataFolderExists(fldr))			DoAlert 0, "Folder '"+fldr+"' does not exist"			i += 1			continue		endif		SetDataFolder $fldr		sdE = fldr+":dE"		sdE0 = fldr+":dE0"		Wave dE = $sdE		if (dE[0]>-1 || dE[Inf]<2)			i += 1			continue						// this scan does not include the elastic line		endif		if (exists("dE0")!=1)				// make dE0 ONLY if it does not already exist			Duplicate $sdE $sdE0		endif		Wave dE0 = $sdE0		PlainFWHMofWave("DetScaled","dE0")		NVAR center = V_center		print GetDataFolder(1),"   ",center		dE = dE0[p] - center				// dE gets changed, dE0 holds the original energy		i += 1	while(1)	SetDataFolder fldrSav EndFunction ReSet_combineScanList()	String/G root:Packages:inelasticUtility:combineScanList	SVAR combineScanList = root:Packages:inelasticUtility:combineScanList	String fldrList = StringByKey("FOLDERS",DataFolderDir(1))	String range,fldr,wName, noteStr	Variable i=0	do		fldr = StringFromList(i,fldrList,",")		i += 1		if (strlen(fldr)<1)			break		endif		wName = ":"+fldr+":dE"		if (!stringmatch(fldr,"scan_*") || exists(wName)!=1)			continue		endif		Wave wav=$wName		range = StringByKey("range",note(wav),"=")		if (strlen(range)<1)			continue		endif		if (WhichListItem(range,combineScanList)>=0)					// range is already there			continue		endif		printf "adding '%s'     range = '%s'\r",wName,range		combineScanList = AddListItem(range,combineScanList,";",Inf)	// add range to end of combineScanList	while(1)End//Function LoadRangeOfSpecScansLocal(range,fileName,path)//	// load a range of spec scans//	// it returns number of scans processed, or 0 if failed//	String range								// range of spec scans, ie "3-7,11,13,17-20"//	String fileName//	String path////	String fldrSav= GetDataFolder(1)//	String fldr = StrVarOrDefault("root:Packages:spec:specDataFolder", ":" )//	if (!stringmatch(fldr,fldrSav))//		DoAlert 1, "Put raw spec data into '"+fldr+"'"//		if (V_flag==1)//			SetDataFolder $fldr//		endif//	endif//	Variable n = LoadRangeOfSpecScans(range,fileName,path)//	SetDataFolder fldrSav//	return n//EndFunction ReadInManyOverniteScans(firstScan,NumOfQs,step)	Variable firstScan		// first scan	Variable NumOfQs		// number of Q scans to process	Variable step			// number of scans per Q//	Variable doFTP = NumVarOrDefault("root:Packages:inelasticUtility:doFTP",0)	if (firstScan<1 || NumOfQs<1 || step<1 || numtype(firstScan+NumOfQs+step))		firstScan = (numtype(firstScan) || firstScan<0) ? 1 : firstScan		NumOfQs = (numtype(NumOfQs) || NumOfQs<1) ? 1 : NumOfQs		step = (numtype(step) || step<1) ? 5 : step		Prompt firstScan, "first scan number"		Prompt NumOfQs, "number of Q's measured"		Prompt step, "number of eVscans per Q"//		doFTP += 1//		Prompt doFTP, "use FTP to get new data",popup,"No;Yes"//		DoPrompt "Process Group of Scans", firstScan, NumOfQs, step, doFTP		DoPrompt "Process Group of Scans", firstScan, NumOfQs, step		if (V_Flag)			return 0		endif//		doFTP = (doFTP==2)	endif	printf "  ReadInManyOverniteScans(%d,%d,%d)\r",firstScan,NumOfQs,step	Variable j=0	String fldrSav	SVAR specDefaultFile=root:Packages:spec:specDefaultFile//	if (doFTP)//		FTPdata(specDefaultFile)//	endif	String range	do		sprintf range, "%d-%d", firstScan, firstScan+step-1		ReadInRangeOfScans(range,0)		fldrSav= GetDataFolder(1)		CombineSpecScans(range)		SetDataFolder fldrSav		firstScan += step		j += 1	while (j<NumOfQs)End// notes on usage, remember to set "root:Packages:inelasticUtility:tailPower" and "root:Packages:inelasticUtility:doPlotting"// also set either "root:Packages:inelasticUtility:scaleFactor" or the two lists "list" and "scaleFactorList" in this routine//	String combineScanList="149-153;149-153,155;162-166;162-166,167"				// examples//	String combineScanList = "17:sc3;154:cr5;24:cu2;149-155:al10;156-161:al10;162-167:al10;4-8:tio2;9-13:tio2;14-18:tio2"//	String scaleFactorList = "al10:12.1223;sc3:49.0193;cr5:161.381;cu2:41.4978;tio2:63.2507"Function ReNormAll(rangeList,aluminum_special,bkgFldr)	String rangeList	Variable aluminum_special				// 0=no,  1=yes,   2=conditional on folder name	String bkgFldr							// folder with background waves	String scanList=StrVarOrDefault("root:Packages:inelasticUtility:combineScanList", "")	if (WhichListItem(rangeList,scanList+";;")<0 && !stringmatch(rangeList,"all"))		scanList = AddListItem(rangeList,scanList)	// add given range to the front of the list	endif	Variable printIt = 0	if (numtype(aluminum_special) || aluminum_special<0 || aluminum_special>2  || strlen(rangeList)<1)		aluminum_special = (numtype(aluminum_special) || aluminum_special<0) ? 0 : aluminum_special+1		if (strlen(scanList))			Prompt rangeList, "scan range ist for combining", popup, "all;"+scanList		else			Prompt rangeList, "scan range list for combining, no combine list found"		endif		Prompt aluminum_special, "for Al remove bkg and compute 1st moment",popup,"No 1st moments;all Al;Al only on al# sub-folders"		DoPrompt "scan?",rangeList, aluminum_special		if(V_Flag)			return 1		endif		aluminum_special -= 1		printIt = 1	endif	if (strlen(rangeList)<1)		DoAlert 0,"no range of scans given"		return 1	endif	printIt = strlen(bkgFldr) ? printIt : 1	bkgFldr = ChooseNewBkgFolder(bkgFldr)		// this also sets the global lastBkg	if (strlen(bkgFldr)<1)		DoAlert 0,"no background folder chosen"		return 1	endif	if (printIt)		printf "ReNormAll(\"%s\",%d,\"%s\")\r",rangeList,aluminum_special,bkgFldr	endif	scanList = SelectString(stringmatch(rangeList,"all"),rangeList,scanList)	String fldrSav= GetDataFolder(1)	SetDataFolder root:	SVAR specDataFolder= root:Packages:spec:specDataFolder	String specDataFolderSAVE=specDataFolder		// save original value	NVAR scaleFactor=root:Packages:inelasticUtility:scaleFactor	Variable scaleFactorSAVE=scaleFactor	String subFldr	String scaleFactorList = StrVarOrDefault("root:Packages:inelasticUtility:scaleFactorList","")	String wName, eName	Variable i	for (i=0;i<ItemsInList(scanList);i+=1)		ReNormOne(StringFromList(i,scanList),aluminum_special,bkgFldr)	endfor	SetDataFolder fldrSav	specDataFolder = specDataFolderSAVE	scaleFactor = scaleFactorSAVEEnd////Function ReNormAll(range,aluminum_special,bkgFldr)//	String range//	Variable aluminum_special				// 0=no,  1=yes,   2=conditional on folder name//	String bkgFldr							// folder with background waves//	String list = "all;"+StrVarOrDefault("root:Packages:inelasticUtility:combineScanList", "")//	Variable printIt = 0//	if (numtype(aluminum_special) || aluminum_special<0 || aluminum_special>2  || strlen(range)<1)//		if (WhichListItem(range,list)<0 && strlen(range))//			list = list+";"+range//		endif//		aluminum_special = (numtype(aluminum_special) || aluminum_special<0) ? 0 : aluminum_special+1//		if (strlen(list)>4)//			Prompt range, "scan range for combining", popup, list//		else//			Prompt range, "scan range for combining, no combine list found"//		endif//		Prompt aluminum_special, "for Al remove bkg and compute 1st moment",popup,"No 1st moments;all Al;Al only on al# sub-folders"//		DoPrompt "scan?",range, aluminum_special//		if(V_Flag)//			return 1//		endif//		aluminum_special -= 1//		printIt = 1//	endif//	if (strlen(range)<1)//		DoAlert 0,"no range of scans given"//		return 1//	endif//	printIt = strlen(bkgFldr) ? printIt : 1//	bkgFldr = ChooseNewBkgFolder(bkgFldr)		// this also sets the global lastBkg//	if (strlen(bkgFldr)<1)//		DoAlert 0,"no background folder chosen"//		return 1//	endif//	if (printIt)//		printf "ReNormAll(\"%s\",%d,\"%s\")\r",range,aluminum_special,bkgFldr//	endif////	Variable irange = WhichListItem(range,list)	// index to list when only one range is chosen//	// irange ≤ -1 --> range entered by hand,   irange = 0 --> do all in list,    irange ≥ 1  --> do item one-1 in list////	String fldrSav= GetDataFolder(1)//	SetDataFolder root:////	SVAR specDataFolder= root:Packages:spec:specDataFolder//	String specDataFolderSAVE=specDataFolder		// save original value//	NVAR scaleFactor=root:Packages:inelasticUtility:scaleFactor//	Variable scaleFactorSAVE=scaleFactor//	String subFldr//	String scaleFactorList = StrVarOrDefault("root:Packages:inelasticUtility:scaleFactorList","")////	Variable i = (irange==0) ? 1 : irange			// for irange==0, i starts with 1//	String wName, eName//	do//		if (irange>=0)								// if irange ≤ -1, then do not chage range//			range = StringFromList(i,list)//			if (strlen(range)<1)//				break//			endif////			if (i>0)////				print ""////			endif//		endif////		printf "calling     ReNormOne(%s,%d)\r", range,aluminum_special//		ReNormOne(range,aluminum_special,bkgFldr)//		i += 1//	while (irange==0)						// keep looping on all, only go thru once on the others//	SetDataFolder fldrSav//	specDataFolder = specDataFolderSAVE//	scaleFactor = scaleFactorSAVE//EndFunction ReNormOne(range,aluminum_special,bkgFldr)	String range	Variable aluminum_special				// 0=no,  1=yes,   2=conditional on folder name	String bkgFldr							// folder with background waves	if (numtype(aluminum_special) || aluminum_special<0  || strlen(range)<1)		String list = StrVarOrDefault("root:Packages:inelasticUtility:combineScanList", "")		if (strlen(list)>1)			Prompt range, "scan range for combining", popup, list		else			Prompt range, "scan range for combining"		endif		aluminum_special = (numtype(aluminum_special) || aluminum_special<0) ? 0 : aluminum_special+1		Prompt aluminum_special, "for Al remove bkg and compute 1st moment",popup,"No 1st moments;all Al;Al only on al# sub-folders"		DoPrompt "scan?",range, aluminum_special		if(V_Flag)			return 1		endif		aluminum_special -= 1	endif	if (strlen(range)<1)		DoAlert 0,"no scan range given"		return 1	endif	bkgFldr = ChooseNewBkgFolder(bkgFldr)		// this also sets the global lastBkg	if (strlen(bkgFldr)<1)		DoAlert 0,"no background folder chosen"		return 1	endif	String fldrSav= GetDataFolder(1)	SetDataFolder root:	SVAR specDataFolder= root:Packages:spec:specDataFolder	String specDataFolderSAVE=specDataFolder		// save original value	NVAR scaleFactor=root:Packages:inelasticUtility:scaleFactor	Variable scaleFactorSAVE=scaleFactor	String subFldr, wName, eName	String scaleFactorList = StrVarOrDefault("root:Packages:inelasticUtility:scaleFactorList","")	subFldr = StringFromList(1,range,":")	range = StringFromList(0,range,":")	if (strlen(subFldr)>0)				// a sub folder is specified		specDataFolder = "root:raw:"+subFldr+":"	endif	scaleFactor = NumberByKey(subFldr,scaleFactorList)	scaleFactor = numtype(scaleFactor) ? scaleFactorSAVE : scaleFactor	if (strlen(scaleFactorList)>1)		printf "re-processing range='%s',  in sub folder '%s',   with scale factor = %g\r",range,subFldr,scaleFactor	endif	scaleFactor *= NumVarOrDefault(specDataFolder+"spec"+num2istr(str2num(range))+":slitFactor",1)	wName = CombineSpecScans(range)		// returns the full pathname to the data folder	eName = wName +"dE"	wName += "DetScaled"	if (WaveExists($wName) && WaveExists($eName))		Wave dE=$eName//		if (dE[0] < -1.9)							// only subtract bkg if dE goes beyond -2eV		Variable epoch = NumberByKey("EPOCH",note(dE),"=")+Epoch_spec_Igor		Variable lowEnd = (date2secs(2004,7,1)<epoch && epoch<date2secs(2004,12,12)) ? -0.9 : -1.9	// special for [July1,2004  to  Aug 1, 2004]		if (dE[0] < lowEnd)							// only subtract bkg if dE goes beyond -2eV			ApplyCaF2Bkg($wName,bkgFldr)			wName += "B"		endif//		if (dE[0] < -8)							// only subtract bkg if dE goes beyond -8eV//			ApplyFlippedBkg($wName,0)//			wName += "B"//		endif	endif	if (aluminum_special==1 || (aluminum_special==2 && stringmatch(subFldr,"al*")))		MomentOfAluminum($wName,2)			// 2 --> use power law tail	endif	SetDataFolder fldrSav	specDataFolder = specDataFolderSAVE	scaleFactor = scaleFactorSAVE	return 0End// using the standard CaF2 elastic peak, remove bkg from wave 'wav'.// creates the waves wavB and wavBkg, which may be added to the top plotFunction ApplyCaF2Bkg(wav,bkgFldr)	Wave wav				// wave to remove bkg from, usually Det or DetScaled	String bkgFldr			// folder with background waves	String fldrSav= GetDataFolder(1)	Variable addToPlot=NumVarOrDefault("root:Packages:inelasticUtility:doPlotting",0)	String swav	if (!WaveExists(wav))	// if wav was entered as $"", then we get here		swav="DetScaled"		String flist = listFoldersStartingWith("scan_")		if (strlen(flist)>1)							// I see scans folders, look in there			// first try to set id to go with the top graph			Wave ywav = TraceNameToWaveRef("","DetScaled")			String id			if (WaveExists(ywav))				id = GetWavesDataFolder(ywav,0)			else				id = StringFromList(ItemsInList(flist)-1,flist)	// folder id, something like "43_47"			endif			Prompt id, "id of data folder (e.g. \"62_66\")", popup, flist			Prompt swav, "Wave to remove background from", popup, "Det;DetScaled"			DoPrompt "pick wave for background removal", id, swav			swav = ":"+id+":"+swav		else											// probably in the folder already, look here			Prompt swav, "Wave to remove background from", popup, WaveList("D*",";","DIMS:1")				DoPrompt "pick wave for background removal", swav		endif		if (V_Flag)			return NaN		endif		addToPlot=1		Wave wav=$swav	endif	bkgFldr = ChooseNewBkgFolder(bkgFldr)		// this also sets the global lastBkg	// done with user input	if (!DataFolderExists(bkgFldr) && !DataFolderExists("root:Packages:inelasticUtility:"+bkgFldr) || !strlen(bkgFldr))		print "could not find background folder: '"+bkgFldr+"'"		Abort "could not find background folder: '"+bkgFldr+"'"	endif	swav=GetWavesDataFolder(wav,2)				// swav is the full path name to wave	if (!WaveExists(wav))		print "could not find '"+swav+"'"		Abort "'"+swav+"'"+" does not exist"	endif	String fldr = GetWavesDataFolder(wav,1)		// get name of folder (full path) to wav	SetDataFolder $fldr	String strB, strBkg	strB = swav+"B"	strBkg = swav+"Bkg"	Duplicate/O $swav $strB, $strBkg	Wave wavB = $strB	Wave wavBkg = $strBkg	Variable BonGraph = isWaveOnGraph("",wavB)	// flags that wave is on the top graph	Variable BkgOnGraph = isWaveOnGraph("",wavBkg)	addToPlot = (BonGraph && BkgOnGraph) ? 0 : addToPlot	// do not add wave to plot if both are already there	if (addToPlot && cmpstr(StringFromList(0,GetRTStackInfo(0)),"ReNormAll"))		DoAlert 1, "Append Missing Waves to top graph when done"		addToPlot = (V_Flag==1)	endif// This section finds the shift that aligns peaks of background and data	WaveStats/Q wav	Variable ilo, ihi, dEmax, level = V_max*0.25	// fit the elastic peak at only up to 25% of max.// change made Dec 04, things seem to fit betterlevel = V_max*0.95	Wave dE=dE	dEmax = dE[V_maxloc]							// dE at the max, a rough approximation of the energy offset	Make/O/D W_coef={dEmax,V_max}	if (abs(dEmax)<.005)		W_coef[0] = 0.01	endif//  In this section, add a mask so that we are not fitting the peak, but the tails on the -energy side mostly//	what we used to do is to fit the center of the peak between the half heights.  But this does not work //	properly when there is a big dead-time correction at the peak////	Ignore the peak part, and use the left side from 25% of the peak max out to -4 eV,//	and on the right side go from 25% down out to +1.25 eV.	String maskName = UniqueName("mask",1,0)	Make/N=(numpnts(wavB)) $maskName	Wave mask = $maskName	mask = 0										// mask off everything	ilo = BinarySearch(dE,-4+dEmax)	FindLevel /P/Q/R=[ilo,V_maxloc] wav, level	ihi = floor(V_LevelX)	mask[ilo,ihi] = 1								// turn on from -4eV to 25% of peak	if (ihi-ilo<=0)		return NaN	endif	FindLevel /P/Q/R=[V_maxloc,Inf] wav, level	ilo = ceil(V_LevelX)	ihi = BinarySearch(dE,1.25+dEmax)	ilo = (ilo==ihi) ? ilo-1 : ilo					// if ilo==ihi, move ilo one lower	mask[ilo,ihi] = 1								// turn on from 25% of peak to 1.25eV	if (ihi-ilo<=0)		return NaN	endif	String errTail = UniqueName("errTail",1,0)	// make the tails carry more weight	if (exists(swav+"_err")==1)		Wave errw = $(swav+"_err")		Duplicate $(swav+"_err") $errTail		Wave errT = $errTail// change made Dec 04, things seem to fit better//		errT = errw[p]^2							// what I had needed to make the tails fit		errT = errw[p]^(1.15)						// now a much smaller correction is needed, things work better		errT = numtype(errT[p]) ? Inf : errT[p]	endif	if (exists(errTail)==1)		FuncFit /Q CaF2_fit, W_coef, $strB /X=dE /M=mask /W=$errTail /I=1	else		FuncFit /Q CaF2_fit, W_coef, $strB /X=dE /M=mask	endif	KillWaves/Z $maskName, $errTail	String noteStr=note($strB)	// This section actually subtracts background from data	Note/K $strBkg	Note $strBkg, noteStr	Note/K $strB	Note $strB, noteStr	Variable i,N=numpnts(wav)	for (i=0;i<N;i+=1)		wavBkg[i] = CaF2_fit(W_coef,dE[i])		wavB[i] = wav[i] - wavBkg[i]	endfor//	printf "applied CaF2 bkg to '%s',  center at %g\r",GetWavesDataFolder(wav,2),W_coef[0]	printf "applied the background '%s' to '%s',  center at %g\r",bkgFldr,GetWavesDataFolder(wav,2),W_coef[0]	if (addToPlot)		String str		if (!BkgOnGraph)			AppendToGraph $strBkg vs dE			str = NameOfWave($strBkg)			ModifyGraph lsize($str)=2,rgb($str)=(19675,39321,1)		endif		if (!BonGraph)			AppendToGraph $strB vs dE			str = NameOfWave($strB)			ModifyGraph opaque($str)=1,lstyle($str)=1			ModifyGraph mode($str)=4,marker($str)=8,msize($str)=2			ModifyGraph zero(left)=2		endif	endif	SetDataFolder fldrSav	return 0End//Function ApplyCaF2Bkg(wav,halfWidth)//	Wave wav				// wave to remove bkg from, usually Det or DetScaled//	Variable halfWidth		// halfWidth to use for finding the peak center//	String fldrSav= GetDataFolder(1)////	Variable addToPlot=NumVarOrDefault("root:Packages:inelasticUtility:doPlotting",0)//	String swav//	Prompt halfWidth, "width of peak to use for centering (eV)"//	if (WaveExists(wav) && numtype(halfWidth))		// wav exists, only need halfWidth//		halfWidth = numtype(halfWidth) ? 0.3 : halfWidth//		DoPrompt "half width", halfWidth//		if (V_Flag)//			return NaN//		endif//	elseif (!WaveExists(wav) || numtype(halfWidth))	// if wav was entered as $"", then we get here//		halfWidth = numtype(halfWidth) ? 0.3 : halfWidth//		swav="DetScaled"//		String flist = listFoldersStartingWith("scan_")//		if (strlen(flist)>1)							// I see scans folders, look in there////			// first try to set id to go with the top graph//			Wave ywav = TraceNameToWaveRef("","DetScaled")//			String id//			if (WaveExists(ywav))//				id = GetWavesDataFolder(ywav,0)//			else//				id = StringFromList(ItemsInList(flist)-1,flist)	// folder id, something like "43_47"//			endif//			Prompt id, "id of data folder (e.g. \"62_66\")", popup, flist//			Prompt swav, "Wave to remove background from", popup, "Det;DetScaled"//			DoPrompt "pick wave for background removal", id, swav,halfWidth//			swav = ":"+id+":"+swav//		else											// probably in the folder already, look here//			Prompt swav, "Wave to remove background from", popup, WaveList("D*",";","DIMS:1")//			DoPrompt "pick wave for background removal", swav,halfWidth//		endif//		if (V_Flag)//			return NaN//		endif//		addToPlot=1//		Wave wav=$swav//	endif////	swav=GetWavesDataFolder(wav,2)				// swav is the full path name to wave//	if (!WaveExists(wav))//		print "could not find '"+swav+"'"//		Abort "'"+swav+"'"+" does not exist"//	endif//	String fldr = GetWavesDataFolder(wav,1)		// get name of folder (full path) to wav//	SetDataFolder $fldr////	String strB, strBkg//	strB = swav+"B"//	strBkg = swav+"Bkg"//	Duplicate/O $swav $strB, $strBkg//	Wave wavB = $strB//	Wave wavBkg = $strBkg//	Variable BonGraph = isWaveOnGraph("",wavB)		// flags that wave is on the top graph//	Variable BkgOnGraph = isWaveOnGraph("",wavBkg)//	addToPlot = (BonGraph && BkgOnGraph) ? 0 : addToPlot	// do not add wave to plot if both are already there//	if (addToPlot)//		DoAlert 1, "Append Missing Waves to top graph when done"//		addToPlot = (V_Flag==1)//	endif////	// This section finds the shift that aligns peaks of background and data//	Wave dE=dE//	WaveStats/Q $strB//	Variable dEo = dE[V_maxloc]//	Variable ilo = floor(BinarySearchInterp(dE,dEo-halfWidth))//	Variable ihi = ceil(BinarySearchInterp(dE,dEo+halfWidth))//	String err = swav+"_err"//	Make/O/D W_coef={.0001,1}//	if (exists(err)==1)//		FuncFit /Q CaF2_fit, W_coef, $strB[ilo,ihi] /X=dE /W=$err /I=1//	else//		FuncFit /Q CaF2_fit, W_coef, $strB[ilo,ihi] /X=dE//	endif//	String noteStr=note($strB)////	// This section provides the minimum background.////	if (NumVarOrDefault("root:useMinBkg",0))		// use a minimum bkg, use min between [60,80eV]////		Variable minBkg////		String printMore=""////		if (exists("minBkg")==2)					// use the specified minBkg in local data folder////			NVAR GlobalminBkg = minBkg////			minBkg = max(GlobalminBkg,0)////			sprintf printMore, ",   and a minimum background of %g",minBkg////		else////			ilo = BinarySearch(dE,60)////			ihi = BinarySearch(dE,80)////			ilo = (ilo<0) ? dE[inf] : ilo////			ihi = (ihi<0) ? dE[inf] : ihi////			WaveStats /Q/R=[ilo,ihi] $swav		// get V_min////			minBkg = max(V_min,0)////			sprintf printMore, ",   and a minimum background of %g in %s[0,%d]",minBkg,strBkg,ihi////		endif////		Wave wBkg=$strBkg////		ilo = BinarySearch(dEneg,0)////		ihi = numpnts(wBkg) - 1////		wBkg[0,ihi] = max(minBkg,wBkg[p])////		noteStr = ReplaceNumberByKey("minBkg",noteStr,minBkg,"=")////		print printMore////	endif////	// This section subtracts background from data//	Note $strBkg noteStr//	Note/K $strB//	Note $strB noteStr//	Variable i, N=numpnts(wav)//	for (i=0;i<N;i+=1)//		wavBkg[i] = CaF2_fit(W_coef,dE[i])//		wavB[i] = wav[i] - wavBkg[i]//	endfor//	printf "applied CaF2 bkg to '%s',  center at %g\r",GetWavesDataFolder(wav,2),W_coef[0]////	if (addToPlot)//		String str//		if (!BkgOnGraph)//			AppendToGraph $strBkg vs dE//			str = NameOfWave($strBkg)//			ModifyGraph lsize($str)=2,rgb($str)=(19675,39321,1)//		endif//		if (!BonGraph)//			AppendToGraph $strB vs dE//			str = NameOfWave($strB)//			ModifyGraph opaque($str)=1,lstyle($str)=1//			ModifyGraph mode($str)=4,marker($str)=8,msize($str)=2//		endif//	endif//	SetDataFolder fldrSav//	return 0//EndStatic Function isWaveOnGraph(graphName,w)	String graphName	Wave w	String sw = GetWavesDataFolder(w,2)	Variable i=0	do		Wave wav = WaveRefIndexed(graphName,i,1)		if (!WaveExists(wav))			return 0		endif		if (!cmpstr(sw,GetWavesDataFolder(wav,2)))			return 1		endif		i +=1	while(1)EndFunction CaF2_fit(w,x) : FitFunc	Wave w	Variable x	//CurveFitDialog/ These comments were created by the Curve Fitting dialog. Altering them will	//CurveFitDialog/ make the function less convenient to work with in the Curve Fitting dialog.	//CurveFitDialog/ Equation:	//CurveFitDialog/ f(x) = amp*interp(x-offset,CaF_dE,CaF)	//CurveFitDialog/ End of Equation	//CurveFitDialog/ Independent Variables 1	//CurveFitDialog/ x	//CurveFitDialog/ Coefficients 2	//CurveFitDialog/ w[0] = offset	//CurveFitDialog/ w[1] = amp	SVAR lastBkg = root:Packages:inelasticUtility:lastBkg	String fldr	fldr = SelectString(DataFolderExists(lastBkg),"root:Packages:inelasticUtility:","")+lastBkg	String wName = fldr+":CaF"	if (exists(wName)!=1)		DoAlert 0,"could not find "+wName+" in CaF2_fit()"		return NaN	endif	Wave CaF=$wName	wName = fldr+":CaF_dE"	if (exists(wName)!=1)		DoAlert 0,"could not find "+wName+" in CaF2_fit()"		return NaN	endif	Wave CaF_dE=$wName//	Wave CaF=root:Packages:inelasticUtility:CaF2BkgMono:CaF//	Wave CaF_dE=root:Packages:inelasticUtility:CaF2BkgMono:CaF_dE//	NVAR x0=root:Packages:inelasticUtility:CaF2BkgMono:x0					// dE of peak (or center) of the CaF2 curve//	NVAR switchPoint=root:Packages:inelasticUtility:CaF2BkgMono:switchPoint// place to switch between + and -	Variable x0 = NumberByKey("x0", note(CaF))							// center of the CaF2 curve	Variable switchPoint = NumberByKey("switchPoint", note(CaF))		// place to switch between + and -	Variable yval=NaN//	Variable switchPoint = 9.5	Variable N = numpnts(CaF)	x = x-w[0]	x = (x<switchPoint) ? x : -x	x += x0	if (x<=CaF_dE[0])		yval = CaF[0]	elseif (x>=CaF_dE[N-1])		yval = CaF[N-1]	else		yval = interp(x,CaF_dE,CaF)	endif	return w[1] * yvalEndFunction ApplyFlippedBkg(wav,deV)	Variable deV	Wave wav			// wave to remove bkg from, usually Det or DetScaled	String fldrSav= GetDataFolder(1)	Variable addToPlot=NumVarOrDefault("root:Packages:inelasticUtility:doPlotting",0)	String swav	if (WaveExists(wav) && numtype(deV))		// wav exists, only need deV		Prompt deV, "peak shift (eV)"		DoPrompt "give offset energy of background peak (eV)", deV		if (V_Flag)			return NaN		endif	elseif (!WaveExists(wav) || numtype(deV))		// if wav was entered as $"", then we get here		deV = numtype(deV) ? 0 : deV		Prompt deV, "peak shift (eV)"		swav="Det"		String flist = listFoldersStartingWith("scan_")		if (strlen(flist)>1)							// I see scans folders, look in there			String id = StringFromList(ItemsInList(flist)-1,flist)	// folder id, something like "43_47"			Prompt id, "id of data folder (e.g. \"62_66\")", popup, flist			Prompt swav, "Wave to remove background from", popup, "Det;DetScaled"			DoPrompt "pick wave for background removal", id, swav,deV			swav = ":"+id+":"+swav		else											// probably in the folder already, look here			Prompt swav, "Wave to remove background from", popup, WaveList("D*",";","DIMS:1")			DoPrompt "pick wave for background removal", swav,deV		endif		if (V_Flag)			return NaN		endif		addToPlot=1		Wave wav=$swav	endif	swav=GetWavesDataFolder(wav,2)				// swav is the full path name to wave	if (!WaveExists(wav))		print "could not find '"+swav+"'"		Abort "'"+swav+"'"+" does not exist"	endif	String fldr = GetWavesDataFolder(wav,1)		// get name of folder (full path) to wav	SetDataFolder $fldr	String strB, strBkg	strB = swav+"B"	strBkg = swav+"Bkg"	Duplicate/O $swav $strB, $strBkg	Wave dE=dE	Variable ilo = floor(BinarySearchInterp(dE,-2.5))	Variable ihi = ceil(BinarySearchInterp(dE,2.5))	String err = swav+"_err"	if (exists(err)==1)		CurveFit/Q gauss $strB[ilo,ihi] /X=dE /W=$err /I=1	else		CurveFit/Q gauss $strB[ilo,ihi] /X=dE	endif	Wave W_coef=W_coef	printf "center at %g",W_coef[2]	// used 1eV steps everywhere and use 0.2 eV in [-2,2]	Variable N = (dE[inf]-dE[0])+1 + (2*9)	Make/N=(N)/O dEneg	dEneg=0	Variable i	for (i=0;i<((dE[inf]-dE[0])+1);i+=1)		dEneg[i] = dE[0]+i	endfor	for (i=101;i<110;i+=1)		dEneg[i] = -0.9 + (i-101)/10	endfor	for (i=110;i<119;i+=1)		dEneg[i] = 0.1 + (i-110)/10	endfor	Sort dEneg,dEneg	String cmd	sprintf cmd "Interpolate/T=3/I=3/F=0/S=%s/Y=%s/X=dEneg %s /X=dE", err,strBkg,swav	Execute cmd	String printMore="", noteStr=note($strB)	if (NumVarOrDefault("root:useMinBkg",0))		// use a minimum bkg, use min between [60,80eV]		Variable minBkg		if (exists("minBkg")==2)					// use the specified minBkg in local data folder			NVAR GlobalminBkg = minBkg			minBkg = max(GlobalminBkg,0)			sprintf printMore, ",   and a minimum background of %g",minBkg		else			ilo = BinarySearch(dE,60)			ihi = BinarySearch(dE,80)			ilo = (ilo<0) ? dE[inf] : ilo			ihi = (ihi<0) ? dE[inf] : ihi			WaveStats /Q/R=[ilo,ihi] $swav		// get V_min			minBkg = max(V_min,0)			sprintf printMore, ",   and a minimum background of %g in %s[0,%d]",minBkg,strBkg,ihi		endif		Wave wBkg=$strBkg		ilo = BinarySearch(dEneg,0)		ihi = numpnts(wBkg) - 1		wBkg[0,ihi] = max(minBkg,wBkg[p])		noteStr = ReplaceNumberByKey("minBkg",noteStr,minBkg,"=")	endif	Note/K $strBkg	Note $strBkg, noteStr	Note/K $strB	Note $strB, noteStr	print printMore	Wave wB = $strB	dEneg = -dEneg[p] + 2*W_coef[2]+deV	wB = wav[p] - interpBkg(dE[p],deNeg,$strBkg)	if (addToPlot)		DoAlert 1, "Append Waves to top graph"		if (V_Flag==1)			AppendToGraph $strBkg vs dEneg			AppendToGraph $strB vs dE			String str = NameOfWave($strBkg)			ModifyGraph lsize($str)=2,rgb($str)=(19675,39321,1)			str = NameOfWave($strB)			ModifyGraph opaque($str)=1,lstyle($str)=1			ModifyGraph mode($str)=4,marker($str)=8,msize($str)=2		endif	endif	SetDataFolder fldrSav	return 0EndStatic Function interpBkg(xx,wx,wy)	Variable xx	Wave wx,wy	if (xx > wx[0])		return wy[0]	else		return interp(xx,wx,wy)	endifEndStatic Function/T listFoldersStartingWith(start)	String start			// ="scan_*"	start += "*"	string str, list=""	Variable ii=0	do		str = GetIndexedObjName(":",4,ii)		if (stringmatch(str, start))			list += str+";"		endif		ii += 1	while(strlen(str)>0)	return listEndFunction CorrectionFactorElement(symb,DataAlMoment,keV)	// Multiply other elements data by fhis	// if DataAlMoment ==NaN, then the user is prompted from root:AlMomentList	// example of root:AlMomentList = "2.34362  at 7.586 after TiO2  at 7.586 after TiO2;7.08226 at 9.49 old value"	String symb			// atomic symbol, or material name in corresponding .mtl file	Variable DataAlMoment	// first moment of the aluminum data,1kF=1.75 (1/Å)	Variable keV			// incident energy (keV)	Variable symbOK=0	if (!numtype(element2Z(symb)))		symbOK = 1	else		symbOK = strlen(LookUpMaterial(symb)) > 2	endif	Variable iprint=0	if (!symbOK || numtype(DataAlMoment) || DataAlMoment<=0 || numtype(keV) || keV<=0)		symb = SelectString(numtype(Z),symb,"Cr")		SVAR symbols=root:Packages:Elements:symbols		if (symbOK)			Prompt symb, "atomic symbol"		else			Prompt symb, "atomic symbol", popup, "TiO2;NiO;CoO;LiF;CuO;MnO;FeO;CaF2;"+symbols		endif		if ((numtype(DataAlMoment) || DataAlMoment<=0)&&exists("root:AlMomentList")==2)	// use AlMomentList for DataAlMoment & keV			SVAR AlMomentList=root:AlMomentList			String AlData=""			Prompt AlData, "Measured 1st moment of Al, units of (I/Io * eV)", popup, AlMomentList			DoPrompt "values", symb,AlData			DataAlMoment=str2num(StringFromList(0,AlData,"a"))			keV = str2num(StringFromList(1,AlData,"t"))		else														// ask for all three separately			keV = numtype(keV) ? 7.5882 : keV			Prompt keV, "energy (kev),"			Prompt DataAlMoment, "Measured 1st moment of Al, units of (I/Io * eV)"			DataAlMoment = numtype(DataAlMoment) ?	NumVarOrDefault("momentAtInfinity",0) : DataAlMoment			keV = numtype(keV) ? NaN : specinfo(NumVarOrDefault("root:Packages:spec:lastScan",0),"Eo")			DoPrompt "values", symb,DataAlMoment,keV		endif		if (V_Flag)			return NaN		endif		iprint = 1	endif//	iprint = ( iprint || ItemsInList(GetRTStackInfo(0))<2 )		// force printing if called from command line	iprint = ( iprint || topOfStack() )					// force printing if called from command line	if (numtype(keV)||numtype(DataAlMoment) || DataAlMoment<=0)		Abort "invalid DataAlMoment or energy, check AlMomentList"	endif	Variable fsumAluminum = f_sumRule(1.75)		// f_sum rule for aluminum (@ 1.75 1/Å)	Variable muAl = Get_MuFormula("Al",keV)	// 1/abs_length  (1/µm)	Variable muZ = Get_MuFormula(symb, keV)	muZ = (muZ==0) ? NaN : muZ	Variable factor = fsumAluminum/DataAlMoment * muZ / muAl	if (iprint)		if (numtype(factor))			printf "cannot compute correction factor for '%s' at %g keV\r",symb,keV		else			printf "for '%s' at %g keV,  using ∫ E*Al dE = %g, correction factor is %g\r",symb,keV,DataAlMoment,factor		endif	endif	return factorEndFunction UpdateListOfScans(rangeList)	String rangeList	if (ItemsInList(GetRTStackInfo(0))<2 && numtype(str2num(rangeList))>0)		Prompt rangeList, "list of range of scan ranges to combine,  e.g. 1-5;7,8,9;22"		DoPrompt "list of scans ranges", rangeList		if (V_Flag)			return 0		endif		printf "UpdateListOfScans(\"%s\")\r",rangeList	endif	if (numtype(str2num(rangeList)))		return 1	endif	String range	Variable i	for (i=0;i<ItemsInList(rangeList);i+=1)		Update1RangeOfScans(StringFromList(i,rangeList))	endforEndStatic Function Update1RangeOfScans(range)	String range	if (ItemsInList(GetRTStackInfo(0))<2 && numtype(str2num(range))>0)		Prompt range, "range of scan numbers to use"		DoPrompt "scans to combine", range		if (V_Flag)			return 0		endif	endif	if (numtype(str2num(range)))		return 1	endif	String fldrSav= GetDataFolder(1)	String range0=range	range = ExpandRange(range,";")	Variable N=ItemsInList(range)	Variable i1,i2	i1 = str2num(StringFromList(0, range))	i2 = str2num(StringFromList(N-1, range))//	String fldr="root:scan_"+num2istr(i1)+"_"+num2istr(i2)//	if (DataFolderExists(fldr ))//		KillDataFolder $fldr//	endif	String dataFolder=StrVarOrDefault("root:Packages:spec:specDataFolder","root:raw:"), fldr	Variable i,j=0							// kill all existing data (this way we will force an update)	do		i = str2num(StringFromList(j, range))		fldr=dataFolder+"spec"+num2istr(i)		if (DataFolderExists(fldr ))			KillDataFolder $fldr		endif		j += 1	while (j<N)	Variable doFTP = NumVarOrDefault("root:Packages:inelasticUtility:doFTP",0)	ReadInRangeOfScans(range0,doFTP)		// this just does the spec read, no processing	CombineSpecScans(range0)				// this does the processing	SetDataFolder fldrSavEndFunction MomentOfAluminum(wav,tail)		// this assumes that the background is already removed	Wave wav								// wave to take first moment of (usually DetB or DetScaledB)	Variable tail							// type of tail to use (exponential=1, power=2, or fixed=3)	Variable showPlot=0					// flags whether or not to show the plot, don't show if wav given on command line	if (!WaveExists(wav) || tail<1 || tail>3 || numtype(tail))	// if wav was entered as $"", then we get here, or invalid tail		showPlot = 1									// show the plot is user input needed		tail = (numtype(tail) || tail<1 || tail>3) ? 2 : tail		Prompt tail,"type of tail to use",popup,"exponential;power law;fixed fraction"		String swav="DetB"		String flist = listFoldersStartingWith("scan_")		if (WaveExists(wav))							// then only pick tail			DoPrompt "type of analytic", tail		elseif (strlen(flist)>1)							// I see scans folders, look in there			String id = StringFromList(ItemsInList(flist)-1,flist)	// folder id, something like "43_47"			Prompt id, "id of data folder (e.g. \"62_66\")", popup, flist			Prompt swav, "Wave to take 1st moment of", popup, "DetB;DetScaledB"			DoPrompt "pick input wave", id, swav,tail			swav = ":"+id+":"+swav			Wave wav=$swav		else												// probably in the folder already, look here			Prompt swav, "Wave to take 1st moment of", popup, WaveList("D*",";","DIMS:1")			DoPrompt "pick a wave", swav,tail			Wave wav=$swav		endif		if (V_Flag)			return NaN		endif	endif	if (!WaveExists(wav))		print "could not find '"+swav+"'"		Abort "'"+swav+"'"+" does not exist"	endif	if (tail<1 || tail>3 || numtype(tail))		Abort "tail has illegal value of "+num2str(tail)	endif	String fldr = GetWavesDataFolder(wav,1)			// get name of folder (full path) to wav	// try to determine Q (without prompting)	Variable QkF, Q_Angstrom, i	Q_Angstrom = str2num(StringByKey("Q_Angstrom",note(wav),"="))	QkF = numtype(Q_Angstrom) ? NaN : abs(Q_Angstrom)/1.75	if (numtype(QkF))		i = strsearch(fldr,"_",0)+1		if (i)			QkF = QkF_of_scan(str2num(fldr[i,inf]))		endif	endif	if (numtype(QkF) || QkF<=0)		Abort "bad QkF"	endif	// make a correction if the elastic line is not exactly at zero energy	String sPeak=NameOfWave(wav)	i = strlen(sPeak)-1	if (strsearch(sPeak,"B",Inf,1)==i)					// check if name of wav ends in "B"		sPeak = fldr+sPeak[0,i-1]						// trim off trailing "B"	else		sPeak = GetWavesDataFolder(wav,2)			// not a background removed wave, so center on the peak	endif	if (exists(sPeak)!=1)		Abort "unable to find peak wave for setting Eo"	endif	PlainFWHMofWave(sPeak,fldr+"dE")	NVAR Eo=V_center									// center of elastic line	Wave dE=$(fldr+"dE")	printf "processing first moment of '%s' at Q = %g kF,   elastic line at %.3f eV\r",GetWavesDataFolder(wav,2), QkF,Eo	String smoment=fldr+"moment"	Duplicate/O wav $smoment	Wave moment=$smoment	moment *= (dE[p]-Eo)								// first moment corrected for shift in elastic line	moment[0,ceil(BinarySearchInterp(dE,Eo))]=0	// for all x<0, moment is 0	String cmd	sprintf cmd "Interpolate/T=2/N=500/E=2/Y=%smoment_CS %s /X=%sdE", fldr,smoment,fldr	Execute cmd	Wave moment_CS=$(fldr+"moment_CS")	SetScale/P x DimOffset(moment_CS,0),DimDelta(moment_CS,0),"eV", moment_CS	Integrate/T moment_CS	moment_CS /= QkF^2	Variable Etail = 64			// energy where we switch from data to analytic tail	if (showPlot)		Display moment_CS		SetAxis bottom 0,100 		Execute "JonsStyle_()"		Label bottom "∆E   (\\U)"		Label left "1\\Sst\\M moment"		Cursor A moment_CS Etail		ShowInfo	endif	printf "at %g eV, 1st moment = %g,  note this is already divided by QkF^2\r", Etail,moment_CS(Etail)	Variable extraMoment,Ae	if (tail==1)		// use exponenetial tails not power law		Variable act = 20			// activation energy for exponential,   exp(-ene/20)		//  get Ae such that intensity(de) = A * exp(-de/act),  and choose to match at dE=Etail (thus the Ae)		Ae = faverageXY(dE,wav,62.9+Eo,65.1+Eo) * exp(Etail/act)	// this makes wav(Etail) == Ae*exp(-Etail/act)		extraMoment = (act^2) * Ae * exp(-Etail/act) * (1+ Etail/act)	elseif (tail==2)		//  get Ae such that intensity(de) = A * de^power,  and choose to match at dE=Etail (thus the Ae)		Variable power=-3			// was power=-3.4		power = NumVarOrDefault("root:Packages:inelasticUtility:tailPower",-3)		if (power>=-2)			Abort "The first moment will diverge, must choose power < -2"		endif		Variable p2 = power+2		Ae = faverageXY(dE,wav,62.9+Eo,65.1+Eo) / Etail^power	// this makes wav(Etail) == Ae*Etail^power		extraMoment = -Ae / p2 * (Etail^p2)				// extra moment from Etail to infinity	elseif (tail==3)		// assume a fixed fraction passed Eo		Variable fraction = NumVarOrDefault("root:tailFraction",0.06) // default is 6% after 64 eV		Variable loPart = moment_CS(Etail) * QkF^2		// extra moment from Etail to infinity		extraMoment = loPart/(1/fraction-1)				// extra moment from Etail to infinity	else		Abort "tail has illegal value"	endif	extraMoment  /= QkF^2										// need this here too	Variable mtoInfinity = extraMoment + moment_CS(Etail)	Variable correc = extraMoment/mtoInfinity	if (tail==1)		printf "   extrapolating to Infinity, 1st moment = %g,  a %.2g %% correction   (using exponential activation of %g)\r",mtoInfinity,correc*100,act	elseif (tail==2)		printf "   extrapolating to Infinity, 1st moment = %g,  a %.2g %% correction   (using power of %g)\r",mtoInfinity,correc*100,power	elseif (tail==3)		printf "   extrapolating to Infinity, 1st moment = %g,  a %.2g %% correction   (using fixed fraction)\r",mtoInfinity,correc*100	endif	Variable/G momentAtInfinity = mtoInfinity	Variable/G V_QkF = QkF	Killwaves/Z moment_CS, moment	return mtoInfinityEndFunction/T ListAvailableQs()	Variable printIt = (ItemsInList(GetRTStackInfo(0))<2)	String fldrSav= GetDataFolder(1)	Variable Qmax=10, stepSize=.05	Variable N=Qmax/stepSize	Make/N=(N)/O/T availableQs	availableQs = ""	SetScale/P x stepSize,stepSize,"", availableQs	SetDataFolder root:raw:	String fldrList=StringByKey("FOLDERS",DataFolderDir(1))		// a list of all the folders names in raw	String fldr	Variable j,Q,i=0	do		fldr = StringFromList(i,fldrList,",")		if (strlen(fldr)<1)			break		endif		sscanf fldr,"spec%d",j		if (V_flag!=1)			i += 1			continue		endif		Q = Q_of_scan(j)/10							// convert from (1/nm) to (1/Å)		if (numtype(Q) || Q<stepSize/2)			i += 1			continue		endif		availableQs[x2pnt(availableQs,Q)] += num2str(j)+";"		i += 1	while(1)	SetDataFolder fldrSav	String oneQ,str,list=""	availableQs = compressRange(availableQs[p],";")  	for (i=0;i<N;i+=1)		oneQ = availableQs[i]		if (strlen(oneQ)>0)			Q = pnt2x(availableQs,i)			if (printIt)				printf "Q=%.2f    %s\r",Q,availableQs[i]			endif			sprintf str, "Q=%g:scan=%s", Q,oneQ			list += str+";"		endif	endfor	KillWaves/Z availableQs	return listEndFunction DrawAll_Q_Graphs(graph,doLayout)	String graph		// ="all"	Variable doLayout	SVAR graphList=root:Packages:inelasticUtility:graphList	if (!SVAR_Exists(graphList))		Abort "graphList does not exist"	endif	if (strlen(graph)<1)		Prompt graph, "graph to draw",popup,"all;"+graphList		Prompt doLayout, "put up Layouts", popup, "No;Yes"		DoPrompt "Graphs to draw", graph,doLayout		if (V_Flag || strlen(graph)<1)			return 0		endif	endif	Variable N=ItemsInList(graphList)	String gName	Variable i	if (cmpstr(graph,"all"))		gName = "Graph_"+graph		if (strlen(WinList(gName,";","WIN:1"))>0)	// graph already exists, bring it to top			DoWindow/F $gName		else			Execute gName+"()"		endif	else		i = N-1						// put up graphs in reverse order (first one will be on top)		do			gName = "Graph_"+StringFromList(i, graphList)			if (strlen(WinList(gName,";","WIN:1"))>0)	// graph already exists, bring it to top				DoWindow/F $gName			else				Execute gName+"()"			endif			i -= 1		while (i>=0)	endif	if (doLayout-1)		if (cmpstr(graph,"all"))			Execute "LayoutForGraph(\""+graph+"\")"			DoAlert 1, "print the Layouts?"			if (V_Flag==1)					Execute "PrintLayout Layout_"+graph			endif		else			i = 0			do				Execute "LayoutForGraph(\""+StringFromList(i, graphList)+"\")"				i += 1				while (i<N)			DoAlert 1, "print the Layouts?"			if (V_Flag==1)				i = 0				do					Execute "PrintLayout Layout_"+StringFromList(i, graphList)					i += 1					while (i<N)			endif		endif	endifEndWindow LayoutForGraph(name)	String name	Prompt name, "suffix for graph macro", popup, root:Packages:inelasticUtility:graphList	Silent 1	Execute "Layout/C=1/W=(5,42,624,594)/K=1 Graph_"+name+"(41,66,574,552)/O=1"	Layout_Corner_Labels_Style_()	Execute "DoWindow/C Layout_"+nameEndMacroFunction FindElasticCenterPeak(fldrList)	String fldrList	if (strlen(fldrList)<1)		Prompt fldrList, "folders to check for elastic peak"		DoPrompt "Find Elastic Peak", fldrList		if (V_Flag)			return 0		endif	endif	String fldrSav= GetDataFolder(1)	String fldr	Variable i=0	do		fldr = StringFromList(i,fldrList,",")		if (strlen(fldr)<1)			break		endif		SetDataFolder $fldr		wavestats/Q Det		CurveFit/Q gauss Det[V_maxloc-18,V_maxloc+18] /X=dE 		Wave W_coef=W_coef		FWHM_Gaussian()		NVAR V_FWHM=V_FWHM		printf "in '%s',  Centered at %.3f,  FWHM = %.3f  eV\r",fldr,W_coef[2],V_FWHM		KillWaves/Z  W_coef,W_sigma,W_ParamConfidenceInterval		SetDataFolder fldrSav		i += 1	while (strlen(fldr)>0)	SetDataFolder fldrSavEndFunction/S CombineSpecScans(range)	String range	if (strlen(range)<1)		Prompt range, "range of scan numbers to use"		DoPrompt "scans to combine", range		if (V_Flag)			return ""		endif	endif	Variable doPlotting = NumVarOrDefault("root:Packages:inelasticUtility:doPlotting",0)	Variable useHarmonic=1	if (doPlotting && doPlotting && cmpstr(StringFromList(0,GetRTStackInfo(0)),"ReNormAll"))		if (!stringmatch(StringFromList(0,GetRTStackInfo(0)),"UpdateListOfScans"))			DoAlert 1, "use the harmonic to add dead-time correction"			useHarmonic = (V_Flag==1)		endif	endif	if (useHarmonic && doPlotting && cmpstr(StringFromList(0,GetRTStackInfo(0)),"ReNormAll"))		if (!stringmatch(StringFromList(0,GetRTStackInfo(0)),"UpdateListOfScans"))			DoAlert 0, "Note that the dead time does not yet have the correct mathematical form"		endif	endif	Variable darkIo = NumVarOrDefault("root:Packages:inelasticUtility:darkIo",0)	// default to no dark current	if (darkIo<=0)							// check the spec dark_Io_Name//		SVAR dark_Io_Name=root:Packages:spec:dark_Io_Name//		darkIo = specInfo(str2num(range),dark_Io_Name)		darkIo = specInfo(str2num(range),StrVarOrDefault("root:Packages:spec:dark_Io_Name",""))	endif	darkIo = (darkIo>0) ? darkIo : 0	String range0=range	range = ExpandRange(range,";")	Variable N=ItemsInList(range)	Variable i1,i2	i1 = str2num(StringFromList(0, range))	i2 = str2num(StringFromList(N-1, range))	String fldrSav= GetDataFolder(1)	String newfldr=":scan_"+num2istr(i1)+"_"+num2istr(i2)	NewDataFolder /O $newfldr	String fldr,ywav,xwav, errwav	ywav = newfldr + ":Det"	errwav = newfldr + ":Det_err"	xwav = newfldr + ":dE"//	Variable filter											// transmission of the PF4 filter (always, filter <=1)	Variable dx_combine									// two points get combined if their delta x is < dx_combine (was 0.05)	Variable spm5Data=0									// TRUE if spm5 data is present	SVAR specDataFolder= root:Packages:spec:specDataFolder	if (rawScansExists(range))								// the raw data exists		Make/N=2/O $ywav,$xwav, $errwav=NaN		Wave wxwav=$xwav		Wave wywav=$ywav		Wave werrwav=$errwav		String xx, yy, ii, sec, harm		String noteStr = ""		Variable i		Variable j=0,len=0,len0		do			i = str2num(StringFromList(j, range))			fldr = specDataFolder+"spec"+num2istr(i)+":"//			xx = fldr+"dE_eV"			String xName = StrVarOrDefault(fldr+"xAxisName","")			// this aded to work withe the spm5 files			xx = fldr+xName			spm5Data = (strsearch(xx,":spm5:",0)>=0)					// this is spm5 data//			SVAR yName = $(fldr+"specYwave")			String yName = StrVarOrDefault(fldr+"yAxisName","")			if (strlen(yName)<1)				yName = StrVarOrDefault(fldr+"specYwave","")			endif//			yy = fldr+yName			ii = fldr+"I0"			ii = SelectString(exists(ii)-1,ii,fldr+"Ion0")			sec = fldr+"seconds"			harm = fldr+"harmonic"			Wave wxx=$xx			Wave wyy=$yy			Wave wii=$ii			Wave wsec=$sec			Wave wharm=$harm			Wave filter = $(fldr+"filter")			if (j==0)				noteStr = note(wxx)//				dx_combine = (wxx[1]-wxx[0])/25//				dx_combine = max(NumVarOrDefault("root:Packages:inelasticUtility:dx_combine_min",0),dx_combine)				dx_combine = max(NumVarOrDefault("root:Packages:inelasticUtility:dx_combine_min",0),dx_combine)				dx_combine = (dx_combine<=0)? (wxx[1]-wxx[0])/25 : dx_combine//				dx_combine = dx_combine<=0 ? 1 : 0.01		// this line only needed if there is only one point				dx_combine = dx_combine<=0 ? 1 : (spm5Data ? 0.005 : 1)		// this line only needed if there is only one point//				printf "dx_combine = %g eV\r",dx_combine			endif			len0=len			len += numpnts($yy)			Redimension/N=(len) $xwav,$ywav,$errwav			wxwav[len0,len-1] = wxx[p-len0]			// to compute the signal that goes into wywav, take:    counts/(Io-dark)//			filter = NumberByKey("PF4_trans", StrVarOrDefault(fldr+"EPICS_PVs","PF4_trans:1"))		// defaults to 1, but is never >1//			do not use the filter, because it is located upstream of the ion chambers, so det/Io is still correct			if (spm5Data)				wywav[len0,len-1] = wyy[p-len0]				Wave sigErr = $(fldr+"spm5:sig_err")				if (WaveExists(sigErr))					werrwav[len0,len-1] = sigErr[p-len0]				else					werrwav[len0,len-1] = NaN				endif			elseif (useHarmonic && WaveExists(wharm))//				wywav[len0,len-1] = (wyy[p-len0]+2*wharm[p-len0]) / (wii[p-len0] - (darkIo*wsec[p-len0]))//				werrwav[len0,len-1] = sqrt(wyy[p-len0]+2*wharm[p-len0]) / (wii[p-len0] - (darkIo*wsec[p-len0]))				Duplicate/O wharm wharmTemp_				wharmTemp_ = (wyy[p]<200 && wharm[p]<10) ? 0 : wharm[p]	// harmonic not 2 photons if very small				wywav[len0,len-1] = (wyy[p-len0]+2*wharmTemp_[p-len0]) / (wii[p-len0] - (darkIo*wsec[p-len0]))				werrwav[len0,len-1] = sqrt(wyy[p-len0]+2*wharmTemp_[p-len0]) / (wii[p-len0] - (darkIo*wsec[p-len0]))				KillWaves wharmTemp_			else				wywav[len0,len-1] = wyy[p-len0] / (wii[p-len0] - (darkIo*wsec[p-len0]))				werrwav[len0,len-1] = sqrt(wyy[p-len0]) / (wii[p-len0] - (darkIo*wsec[p-len0]))			endif			if (WaveExists(wii))				werrwav[len0,len-1] = (werrwav[p]==0) ?1 / (wii[p-len0] - (darkIo*wsec[p-len0])) : werrwav[p]		// special case for no counts			endif			// add the filter correction here.  Only correct with filter if after Dec 1, 2006.			if (NumberByKey("EPOCH",noteStr,"=")+Epoch_spec_Igor > date2secs(2006, 12,1))	// new data consider filter correction				if (WaveExists(filter))					wywav[len0,len-1] /=filter					werrwav[len0,len-1] /=filter				endif			endif			j += 1		while (j<N)		Sort $xwav,$xwav,$ywav,$errwav		CombineNearbyPoints(ywav,xwav,errwav,dx_combine,-Inf)			// dx_combine was 0.05		noteStr += "range="+range0+";"		Variable Q = Q_of_scan(str2num(StringFromList(0, range)))			// Q (1/nm)		noteStr += "Q_nm="+num2str(Q)+";"		noteStr += "Q_Angstrom="+num2str(Q/10)+";"//		noteStr += "Q_Angstrom="+num2str(Q_of_scan(str2num(StringFromList(0, range))))+";"		Note/K wxwav		Note wxwav, noteStr		Note/K wywav		Note wywav, noteStr	endif	SetDataFolder $newfldr	newfldr = GetDataFolder(1)				// make this now a full path name, not just relative	Duplicate/O Det DetScaled	Duplicate/O Det_err DetScaled_err	Wave DetScaled=DetScaled	Wave DetScaled_err=DetScaled_err	// get the scaleFactor to use	Variable scaleFactor=NumVarOrDefault("root:Packages:inelasticUtility:scaleFactor",1)//	NVAR scaleFactorG = root:Packages:inelasticUtility:scaleFactor	if (numtype(scaleFactor) || scaleFactor<=0)		// bad scale factor		SVAR scaleFactorList=root:Packages:inelasticUtility:scaleFactorList		String scale_		Prompt scale_,"scale factor",popup,scaleFactorList		DoPrompt "scale factor", scale_		if (V_Flag)			return ""		endif		scaleFactor = str2num(StringFromList(1,scale_,":"))	endif	if (numtype(scaleFactor) || scaleFactor <=0)		return ""	endif	printf "using a scaleFactor of %g",scaleFactor	if (useHarmonic)		printf ",   and the simple  +(2*harmonic)  dead-time correction"	else		printf ",   and no dead-time correction"	endif	printf "\r"	DetScaled*= scaleFactor	DetScaled_err*= scaleFactor	notestr = ReplaceNumberByKey("scaleFactor",note(Det),scaleFactor)	Note/K DetScaled	Note DetScaled, noteStr	SetScale d 0,0,"eV", dE	if (doPlotting)		DisplayCombinedPlot(DetScaled)//DoAlert 0, "NOT returning to starting folder"//DoAlert 0, "returning to starting folder"//		SetDataFolder fldrSav	else		SetDataFolder fldrSav	endif	return newfldrEndStatic Function rawScansExists(range)	String range	if (strlen(range)<1)		return 0	endif	range = ExpandRange(range,";")	Variable j,i=0	do		j = str2num(StringFromList(i,range))		if (numtype(j) && i>0)			break		endif		if (strlen(specInfoT(j,"specCommand"))<1)			// the raw data does not exists			return 0		endif		i += 1	while(1)	return 1EndFunction DisplayCombinedPlot(yWave)	Wave yWave	if (!WaveExists(yWave))					// no Y wave passed, querry for one		String yName="DetScaled"		String flist = listFoldersStartingWith("scan_")	// list of possibilities		String id = StringFromList(ItemsInList(flist)-1,flist)	// folder id, something like "43_47"		Prompt id, "id of data folder (e.g. \"62_66\")", popup, flist		DoPrompt "pick wave folder", id		if (V_Flag)			return NaN		endif		String fldr = ":"+id+":"		String fldrSav= GetDataFolder(1)		SetDataFolder $fldr		String wList = WaveList("Det*",";","")		SetDataFolder $fldrSav		Prompt yName, "Name of Y-wave", popup, wList		DoPrompt "pick input wave", yName		if (V_Flag)			return NaN		endif		yName = fldr+yName		Wave yWave=$yName	endif	if (!WaveExists(yWave))		print "could not find '"+yName+"'"		Abort "'"+yName+"'"+" does not exist"	endif	fldr = GetWavesDataFolder(yWave,1)				// get full path name to waves	String dEname = fldr+"dE"							// get name of delta-energy wave, x-axis	dEname = SelectString(exists(dEname)-1,dEname,fldr+"dE_eV")	if (exists(dEname)!=1)		Abort "cannot find x-axis wave"	endif	Wave dE = $dEname	String noteStr = note(yWave)	Variable scalefactor = NumberByKey("scaleFactor",noteStr)	String range = StringByKey("range",noteStr,"=")	Variable Q = NumberByKey("Q_nm",noteStr,"=")			// Q  (1/nm)	if (numtype(Q))		Q = NumberByKey("Q_Angstrom",noteStr,"=")*10		// Q  (1/Å)	endif	String graphWin = MakeCombinedGraphName(fldr,Q)		// name of graph window	Variable gExists = (strlen(WinList(graphWin, ";","WIN:1"))>0)	// grah window already exists	if (gExists)		DoWindow /F $graphWin		return 0	endif//	Display yWave vs dE	STRUCT boxStructure box	nextWinPosition(box)	Display/W=(box.l,box.t,box.r,box.b) yWave vs dE	ModifyGraph tick=2, minor=1, standoff=0, lowTrip=0.001, mirror=1, gfMult=125	ModifyGraph axOffset(left)=-1.8,axOffset(bottom)=-0.8	String errName = GetWavesDataFolder(yWave,2)+"_err"	// get full path name to err wave waves	if (exists(errName)==1)		Wave yErr=$errName		ErrorBars $NameOfWave(yWave) Y,wave=(yErr,yErr)	endif	if (scaleFactor==1 || numtype(scaleFactor))				// if scaleFactor is 1, then the data is not yet scaled		Label left "detector / I\\Bo\\M  (\\E)"	else//		Label left "s(\\[1\\f02q\\f00\\X1\\S\\F'Symbol'Æ\\F]0,\\F'Symbol'\\M\\f02w\\f00\\F]0)  (\\u eV\\S -1 \\Mnm\\S-3\\M)"		Label left "s(\\[1\\f02q\\f00\\X1\\S\\F'Symbol'Æ\\F]0\\F'Symbol'\\M,\\f02w\\f00\\F]0)  (\\u eV\\S -1 \\Mnm\\S-3\\M)"	endif	Label bottom "∆E   (\\U)"	Textbox/F=0/S=3/A=RT/B=1 SelectString(ItemsInRange(range)-1,"Scan ","Scans ")+range	ModifyGraph mode=4,marker=19,msize=2,lstyle=1,rgb=(0,0,65535)	ModifyGraph zero(bottom)=2	SetAxis left NumVarOrDefault("root:Packages:inelasticUtility:defaultYlo",0),NumVarOrDefault("root:Packages:inelasticUtility:defaultYhi",.2)	SetAxis bottom NumVarOrDefault("root:Packages:inelasticUtility:defaultXlo",-10),NumVarOrDefault("root:Packages:inelasticUtility:defaultXhi",60)	String str//	sprintf str, "Q = %.3f (Å\\S-1\\M)",Q//	AppendText str	sprintf str, "Q = %.2f (nm\\S-1\\M)",Q	AppendText str	sprintf str, "\\Zr070Q = %.3f (Å\\S-1\\M)",Q/10	AppendText str	Variable dchi = 90-specInfo(str2num(range),"chi")	String direction=directionOfScan(NumberByKey("SCAN_N", noteStr,"="))	if (strlen(direction)>0)		AppendText "along ("+direction+")"	endif	if (abs(dchi)>2)								// this was 0.5, not 2.0		AppendText "\\F'Symbol'Dc\\F]0 = "+num2str(dchi)+"°"	endif	str = specInfoT(str2num(range),"comment")	if (strlen(str)>0)		AppendText str	endif	str = StringByKey("DATAFILE",noteStr,"=")	if (strlen(str)>1)		AppendText "\\Zr070"+str+"\\M"		// was \Z09	endif	DoWindow /C $graphWinEndStatic Structure boxStructure	uint32 l,r,t,bEndStructureStatic Function/S nextWinPosition(box)	STRUCT boxStructure &box	String list// fix Ang, nm here	list = MacroList("Graph_*Ang",";","KIND:4;SUBTYPE:Graph")	list += MacroList("Graph_*nm",";","KIND:4;SUBTYPE:Graph")	list = RemoveFromList(WinList("Graph_*",";","WIN:1"),list)	Variable order = ItemsInList(list)	String str = StringByKey("SCREEN1",IgorInfo(0))						// get screen width	Variable i=strsearch(str, "RECT=",0)	Variable width = str2num(StringFromList(2,str[i+5,Inf],","))/2 - 6	// screen height	Variable scrHeight = str2num(StringFromList(3,str[i+5,Inf],","))	Variable aspect=1.9	Variable height = width/aspect	Variable nVert = ceil((scrHeight-height-44) / (22+height))			// number to stack vertically	Variable left,top,right,bottom											// window size	left = round(2+mod(order,2)*(width+4))	order = mod(floor(order/2),nVert)	top = round(44+order*(22+height))	bottom = floor(top+height)	right = floor(left + width)	box.l = left	box.r = right	box.t = top	box.b = bottom	sprintf str,"%d,%d,%d,%d",left,top,right,bottom	return strEndFunction/T MakeCombinedGraphName(fldr,Q)	// make a graph name based on the full folder name and Q	String fldr	Variable Q							// Q in (1/nm)	String gname	Variable i=strsearch(fldr,"scan_",1)+5	fldr = fldr[i,Inf]	i = strlen(fldr)-1	if (char2num(fldr[i])==58)		// 58 is ':'		fldr = fldr[0,i-1]				// strip off trailing ':'	endif	String Qstr	sprintf Qstr, "%03.0f",abs(Q)*10	// Graph name us 1/nm for Q	sprintf gName,"Graph_%s_%snm",fldr,Qstr	gname = UniqueName(gname,6,99)	// catch presence of bad characters	gname = gname[0,strlen(gname)-3]	return gnameEnd//Function/T MakeCombinedGraphName(fldr,Q)	// make a graph name based on the full folder name and Q//	String fldr//	Variable Q							// Q in (1/Å)//	String gname//	Variable i=strsearch(fldr,"scan_",1)+5//	fldr = fldr[i,Inf]//	i = strlen(fldr)-1//	if (char2num(fldr[i])==58)		// 58 is ':'//		fldr = fldr[0,i-1]				// strip off trailing ':'//	endif//	sprintf gName,"Graph_%s_%02dAng",fldr,round(Q*10)//	gname = UniqueName(gname,6,99)	// catch presence of bad characters//	gname = gname[0,strlen(gname)-3]//	return gname//EndFunction/T directionOfScan(scanNum)	Variable scanNum	String wName = UniqueName("hkl",1,0)	Make/N=3/O/D $wName	Wave h = $wName	h[0] = specInfo(scanNum,"H")	h[1] = specInfo(scanNum,"K")	h[2] = specInfo(scanNum,"L")	integerDirectionApprox(h,12)	String str, fmt	fmt = SelectString(h[0]>=0 && h[1]>=0 && h[2]>=0 && h[0]<10 && h[1]<10 && h[2]<10, "%d %d %d","%d%d%d")	sprintf str, fmt,h[0],h[1],h[2]	KillWaves/Z h	return strEndFunction integerDirectionExact(hkl,maxInt)		// changes vector hkl to be an approxiamtely integer vector, like integerDirectionApprox(), but exact	Wave hkl	Variable maxInt	String wName = UniqueName("hkl",1,0)	Make/N=(numpnts(hkl))/O/D $wName	Wave hkli = $wName	WaveStats/Q/M=1 hkl	Variable biggest = max(abs(V_max),abs(V_min))	hkli = round(hkl[p]*maxInt/biggest)	Variable factor = gcf(GetWavesDataFolder(hkli,2))	hkl /= factor	KillWaves/Z hkliEnd//Function integerDirectionApprox(hkl,maxInt)		// changes vector hkl to be an integer vector, approximately in same direction	Wave hkl	Variable maxInt	WaveStats/Q/M=1 hkl	Variable biggest = max(abs(V_max),abs(V_min))	hkl = round(hkl[p]*maxInt/biggest)	Variable factor = gcf(GetWavesDataFolder(hkl,2))	hkl /= factorEnd// this revision of gcf uses the the "PrimeFactors" command available with Igor 5Static Function gcf(factors)				// find greatest common factor of a wave whose values are all integers	String factors					// either a list of factors or the name of a wave containing the factors	String tempName=""	Variable N,i	if (exists(factors)==1 && strsearch(factors,";",0)<0)		// passed a wave name		Wave wav=$factors	else		N = ItemsInList(factors)								// a list was passed		if (N<1)			return NaN		endif		tempName = UniqueName("tempPrimes",1,0)		Make/N=(N) $tempName		Wave wav=$tempName		for (i=0;i<N;i+=1)			wav[i] = str2num(StringFromList(i,factors))		endfor	endif	N=numpnts(wav)	if (N<1)		return NaN	endif	String primeListsName = UniqueName("ListOfPrimes",1,0)	Make/N=(N)/T $primeListsName	Wave/T primeLists=$primeListsName	primeLists = ""	String allPrimes="", item	Variable j,gcf	for (i=0;i<N;i+=1)		PrimeFactors/Q  wav[i]		Wave W_PrimeFactors=W_PrimeFactors		for (j=0;j<numpnts(W_PrimeFactors);j+=1)			primeLists[i]=AddListItem(num2istr(W_PrimeFactors[j]), primeLists[i])		endfor		allPrimes+= primeLists[i]		if (wav[i]==0)									// ensure "0" is there for a 0			primeLists[i]=AddListItem("0", primeLists[i])		endif	endfor	Variable m,found,jN = ItemsInList(allPrimes)	j = 0	gcf=1	for (j=0;j<jN;j+=1)								// loop over all of the primes		item = StringFromList(j,allPrimes)		found = 1		for (i=0;i<N;i+=1)			m = WhichListItem(item,primeLists[i])			if (m>=0)				primeLists[i] = RemoveListItem(m,primeLists[i])			elseif (cmpstr(primeLists[i],"0;"))				found=0			endif		endfor		if (found)			gcf *= str2num(item)		endif	endfor	KillWaves/Z primeLists,W_PrimeFactors, $tempName	return gcfEndFunction ReadInRangeOfScans(range,ftp)	String range	Variable ftp						// 0=no, 1=yes	ftp = (ftp==1)	if (strlen(range)<1)		Prompt range, "range of scan numbers to read"		ftp += 1		Prompt ftp, "first ftp the data", popup, "No;Yes"		DoPrompt "Read range of scans", range, ftp		if (V_Flag)			return 0		endif		ftp -= 1	endif	if (strlen(range)<1)		Abort "nothing to read in"	endif	range = ExpandRange(range,";")	SVAR rawDataFolder=root:Packages:spec:specDataFolder	if (!DataFolderExists(rawDataFolder))		NewDataFolder $rawDataFolder	endif	SVAR specDefaultFile=root:Packages:spec:specDefaultFile	if (strlen(specDefaultFile)<1)		ReTargetDataFile("")	endif	if (ftp)		FTPdata(specDefaultFile)	endif	String fldrSav= GetDataFolder(1)//	SetDataFolder root:raw:	SetDataFolder $rawDataFolder	String str	Variable N=ItemsInList(range)	Variable i=0	do		str = StringFromList(i, range)		if (DataFolderExists("root:raw:spec"+str))			DoAlert 1, "The data for spec"+str+" already exists, delete and re-read?"			if (V_Flag==1)				KillDataFolder $("root:raw:spec"+str)			endif		endif		specRead(specDefaultFile,str2num(str),"raw")		i += 1	while (i<N)	SetDataFolder fldrSavEndFunction User_MoreProcess(fileVar)	Variable fileVar					// file ref number	Variable Eo	String xname = StrVarOrDefault(":specXwave","")	if (stringmatch(xname,"ene*") && exists("dE_eV")!=1)		NVAR hc = root:Packages:Constants:hc		SVAR specValues = specValues		Eo = hc/NumberByKey("wavelength",specValues)		SetValuesIntoList("Eo",num2str(Eo),"specValues")		Duplicate $xname dE_eV		Wave xWave = $xname		dE_eV = (xWave - Eo)*1000		if (!numtype(dE_eV[0]))	// computed OK, change specXwave to 'dE_eV'			SVAR xAxisName = xAxisName			xAxisName = "dE_eV"//			specXwave = "dE_eV"		endif	elseif (exists("dE_eV")==1)		// an eVscan (not just an energy scan)		if (exists("EPICS_PVs"))			SVAR EPICS_PVs=EPICS_PVs			Eo = str2num(StringByKey("DCM_energy", EPICS_PVs)) - dE_eV[0]/1000		else			Eo = NumVarOrDefault("root:Packages:inelasticUtility:Eo_default",NaN)		endif		SetValuesIntoList("Eo",num2str(Eo),"specValues")	endif	// this sectino added for spm5 files	String fldrSav1= GetDataFolder(1)	FStatus fileVar	read_spm5_file(S_fileName,"raw")	SetDataFolder fldrSav1	return 0End//Proc User_MoreProcess(fileVar)//	Variable fileVar					// file ref number//	Silent 1////	String xname = StrVarOrDefault(":specXwave","")//	if (stringmatch(xname,"ene*") && exists("dE_eV")!=1)//		Variable Eo = (root:Packages:Constants:hc)/NumberByKey("wavelength",specValues)//		SetValuesIntoList("Eo",num2str(Eo),"specValues")//		Duplicate $xname dE_eV//		dE_eV = ($xname - Eo)*1000//		if (!numtype(dE_eV[0]))	// computed OK, change specXwave to 'dE_eV'//			specXwave = "dE_eV"//		endif//		return//	endif//	if (exists("dE_eV")==1)		// an eVscan (not just an energy scan)//		Variable Eo//		if (exists("EPICS_PVs"))//			Eo = str2num(StringByKey("DCM_energy", EPICS_PVs)) - dE_eV[0]/1000//		else//			Eo = NumVarOrDefault("root:Packages:inelasticUtility:Eo_default",NaN)//		endif//		SetValuesIntoList("Eo",num2str(Eo),"specValues")//	endif//EndMacro//Proc User_MoreProcess(fileVar)//	Variable fileVar					// file ref number//	Silent 1//	if (exists("dE_eV")==1)		// an eVscan (not just an energy scan)//		Variable Eo//		Eo = str2num(StringByKey("DCM_energy", EPICS_PVs)) - dE_eV[0]/1000//		SetValuesIntoList("Eo",num2str(Eo),"specValues")//	endif//EndMacroFunction read_spm5_file(fileName,path)	// read in data from a merix spm5 file	// as arguments.  The values are:		//				//		0=(no error)		//		1=(scan number cannot be < 1)		//		2=(the data folder already exists)		//		3=(Scan not found)		//		4=(file position given, but it is not start of scan!)		//		5=file reference is invalid		//		// For users who wish to include additional information from the data		// file in igor, create a macro named "extraSpecRead".  An example is		// in "specMore.ipf"	String fileName	String path	Variable fileVar						// file ref number	String line							// line of input from file	Variable i	String str=""	Variable err_flag = 0				// set to no error	String fldrSav= GetDataFolder(1)	String S_fileName	Open /Z/R/P=$path/M="spec data file" fileVar as fileName+".spm5"	if (V_flag)		return 3	endif	FStatus(fileVar)	String/G root:Packages:spec:specDefaultFile_spm5=fileName+".spm5"	Wave ww = $StringFromList(0,WaveList("*",";",""))	String wnote = note(ww)	Variable scanNum = NumberByKey("SCAN_N",note(ww),"=")	if (scanNum<1)		Print "scan number cannot < 1"		return 1	endif	check_fileID_keyed(fileVar)				// update specScanPositions if needed	SVAR specScanPositions=root:Packages:spec:specScanPositions_spm5	V_filepos = NumberByKey(num2istr(scanNum),specScanPositions)	if (numtype(V_filepos))		Close fileVar		if (ItemsInList(GetRTStackInfo(0))<=1)			DoAlert 0, "Scan not found"		endif		return 3	endif	FSetPos fileVar, V_filepos			// reset file position to previous position	// make the special folder for the spm5 file	SVAR rawDataFolder=root:Packages:spec:specDataFolder		// save raw data folder	String rawDataFolder0 = rawDataFolder	err_flag = specReadFromSline(fileVar,V_filePos,folderName="spm5")	// now read in the spm5 data	rawDataFolder = rawDataFolder0							// restore raw data folder	if (err_flag==0)		SVAR xAxisName=:spm5:xAxisName		SVAR yAxisName=:spm5:yAxisName		xAxisName = "dE_eV"		yAxisName = "sig"		Rename :spm5:E_ dE_eV		Rename :spm5:N_ sig		Rename :spm5:X_ sig_err		Rename :spm5:M mon		Rename :spm5:F norm2A		Rename :spm5:A counting		Rename :spm5:C raw		Wave mon=:spm5:mon, sig=:spm5:sig, sig_err=:spm5:sig_err		Variable monAvg = faverage(mon)						// change sig and sig_err to be I/Io equivalent		if (numtype(monAvg)==0)print "monAvg =",monAvg			sig /= monAvg			sig_err /= monAvg		endif		SVAR xAxisName= xAxisName		// have the names point to files in spm5		SVAR yAxisName=:yAxisName		xAxisName = "spm5:dE_eV"		yAxisName = "spm5:sig"	endif	SetDataFolder fldrSav	Close fileVar	String errString=""	switch(err_flag)						// select response to error code		case 2:			errString = "the data folder already exists"			break		case 4:			errString = "File position given, but it is not the start a of scan!"			break		case 5:			errString = "File reference is invalid"			break	endswitch	if (strlen(errString))		print errString		if (ItemsInList(GetRTStackInfo(0))<=1)			DoAlert 0, errString		endif	endif	return err_flagEndFunction/T check_fileID_keyed(fileVar) 	// make the file ID, and ensure that list of scan positions is up to date 	// returns the file ID string	Variable fileVar								// file ref number	String idStr									// desired string for ID purposes	idStr=specProc#make_fileID(fileVar)					// create the id string	String IdStrOld = StrVarOrDefault("root:Packages:spec:specScanPositionsID_spm5","x")	if (stringmatch(idStr,IdStrOld))			// id strings match, return no need to update		return idStr	endif	FStatus fileVar								// save for later re-positioning	Variable fpos0=V_filePos	// these are needed for extending	String fileName = StringByKey("path",idStr,"=")+StringByKey("fileName",idStr,"=")	Variable hashNum = NumberByKey("hash",idStr,"=")	Variable length = NumberByKey("length",idStr,"=")	Variable modSec = NumberByKey("modificationDate",idStr,"=")	String fileName0 = StringByKey("path",IdStrOld,"=")+StringByKey("fileName",IdStrOld,"=")	Variable hash0 = NumberByKey("hash",IdStrOld,"=")	Variable length0 = NumberByKey("length",IdStrOld,"=")	Variable modSec0 = NumberByKey("modificationDate",idStr,"=")	// should I try to extend the specScanPositions, or just completely redetermine them from the start of the file	// the fileName and hash are the same, but the length is different, also check that modification date makes sense	Variable extend = (stringmatch(fileName,fileName0) && hashNum==hash0 && length!=length0)	extend = ( extend && (modSec<=modSec0) ) ? 0 : extend		// don't extend if modification date is before stored date	String/G root:Packages:spec:specScanPositionsID_spm5=idStr	if (exists("root:Packages:spec:specScanPositions_spm5")!=2)		extend = 0		String/G root:Packages:spec:specScanPositions_spm5=""	endif	SVAR specScanPositions=root:Packages:spec:specScanPositions_spm5	specScanPositions = SelectString(extend,"",specScanPositions)	// set to empty if not extending	// start searching for scans at startPos in file	String str = StringFromList(ItemsInList(specScanPositions)-1,specScanPositions)	str = StringFromList(1,str,":")	Variable startPos = str2num(str)	startPos = (numtype(startPos) || startPos<0 || !extend || length<=startPos) ? 0 : startPos	specScanPositions = SelectString(startPos,"",specScanPositions)	// if starting from 0, emtpy string	FSetPos fileVar, startPos										// start searching file from here	String line	if (startPos)														// check that the last position is a #S line		FReadLine fileVar, line		if (strsearch(line,"#S ",0))								// do not try to extend, re-index whole file			startPos = 0			specScanPositions = ""			FSetPos fileVar, startPos								// start at beginning		endif	endif	extend = (startPos>0)	// make the list of positions for each scan in this file	specScanPositions += ListPosOfLineTypes(fileVar,"#S ")	// make a keyword list of scan number and file position	Variable scanNum, filePos	Variable i, N=ItemsInLIst(specScanPositions)	String positions = specScanPositions	specScanPositions= ""	for (i=0;i<N;i+=1)		filePos = str2num(StringFromList(i,positions))		FSetPos fileVar, filePos												// position to the ith scan		FReadLine fileVar, line		scanNum = cmpstr(line[0,1],"#S") ? NaN : str2num(line[2,20])	// scan number at this #S line		specScanPositions = ReplaceNumberByKey(num2istr(scanNum),specScanPositions,filePos)	endfor	FSetPos fileVar, fpos0					// reset file position to previous position	return idStrEndFunction/T ResetGraphLIst(sortType)	Variable sortType		// =-1	String/G root:Packages:inelasticUtility:graphList	SVAR graphList=root:Packages:inelasticUtility:graphList	if (numtype(sortType) || sortType<0 || sortType>2)		sortType = 1		Prompt sortType, "sort graphList?",popup,"none;by index;by Q"		DoPrompt "sort", sortType		if (V_Flag)			return ""		endif		sortType -= 1	endif	String win, mList = MacroList("Graph_*",";","KIND:4;SUBTYPE:Graph;NPARAMS:0")	Variable i,N = ItemsInList(mList)	graphList = ""	for (i=0;i<N;i+=1)		win = StringFromList(i,mList)		win = win[6,Inf]		if (numtype(str2num(win)))			// look for graph macros of type "Graph_number*			continue		endif		graphList = AddListItem(win,graphList,";",inf)	endfor	if (sortType)		N = ItemsInList(graphList)				// sort in order of increasing starting index		Make/N=(N)/O index_temp_		Make/N=(N)/O/T list_temp_		list_temp_ = StringFromList(p,graphList)		index_temp_ = str2num(list_temp_[p])		Sort index_temp_, list_temp_		graphList = ""		for (i=0;i<N;i+=1)			graphList = AddListItem(list_temp_[i],graphList,";",inf)		endfor	endif	if (sortType==2)							// order by Q		for (i=0;i<N;i+=1)			index_temp_[i] = QfromGraphName(list_temp_[i])		endfor		Sort index_temp_, list_temp_		graphList = ""		for (i=0;i<N;i+=1)			graphList = AddListItem(list_temp_[i],graphList,";",inf)		endfor	endif	KillWaves/Z index_temp_,list_temp_	return graphListEndFunction QfromGraphName(gname)		// returns Q in (1/Å)	String gname	Variable j,iend,nm=0	iend = strsearch(gname,"Ang",0)-1		// last digit in Q	if (iend<0)		iend = strsearch(gname,"nm",0)-1	// last digit in Q		if (iend<0)			return NaN		endif		nm = 1								// flags, Q in (1/nm)	endif	// step backwards to first "_"	j = iend+1	do		j -= 1	while(!numtype(str2num(gname[j,j])))	String str = gname[j+1,iend]	if (nm)		return str2num(str)/100			// for nm, always uses 3 digits	elseif (strlen(str)<2)		return  str2num(str)	endif	str = ""	str[0] = gname[j+1,j+1]	str[1] = "."	str[2] = gname[j+2,iend]	return str2num(str)End//Function QfromGraphName(gname)			// returns Q in (1/Å)//	String gname//	Variable Q,j,iend//	iend = strsearch(gname,"Ang",0)-1		// last digit in Q//	if (iend<0)//		return NaN//	endif//	// step backwards to first "_"//	j = iend+1//	do//		j -= 1//	while(!numtype(str2num(gname[j,j])))//	String str = gname[j+1,iend]//	if (strlen(str)<2)//		return str2num(str)//	endif//	str = ""//	str[0] = gname[j+1,j+1]//	str[1] = "."//	str[2] = gname[j+2,iend]//	Q = str2num(str)//	return Q//EndFunction CenterPlotsOnGraph()		// changes the offsets of all of the traces on the top graph so that the elastic lines are centered	Variable hw=1.1				// the x values must span [-hw, hw] to be considered	String tList = TraceNameList("",";",1)	String str, trace	Variable N=ItemsInList(tList), i, j,yoff	for (i=0;i<N;i+=1)		trace = StringFromList(i,tList)		str = TraceInfo("",trace,0)								// first get a possible y offset for this trace		j = strsearch(str,";RECREATION:",0)		str = str[j+12,Inf]		yoff = str2num(StringFromList(1,StringByKey("offset(x)",str,"="),","))		yoff = numtype(yoff) ? 0 : yoff		Wave yWave=TraceNameToWaveRef("",trace)		Wave xWave = XWaveRefFromTrace("",trace)		if (WaveExists(xWave))								// check if xWave includes the origin			if (xWave[0]>-hw || xWave[Inf]<hw)				// skip if xWave does not cover origin				continue			endif			PlainFWHMofWave(GetWavesDataFolder(yWave,2),GetWavesDataFolder(xWave,2))			NVAR center=V_Center			ModifyGraph offset($trace)={-center,yoff}		elseif (leftx(yWave)<=-hw && rightx(yWave)>=hw)	// uses internal wave scaling that spans zero			PlainFWHMofWave(GetWavesDataFolder(yWave,2),"")			NVAR center=V_Center			ModifyGraph offset($trace)={-center,yoff}		endif	endforEndFunction ElapsedTimeForScans(range)	String range	if (strlen(range)<1)		Prompt range, "range of scan numbers to use"		DoPrompt "Time for Scans", range		if (V_Flag)			return 0		endif	endif	range = ExpandRange(range,";")	Variable N=ItemsInList(range)	String wav	Variable s=0, i=0	do		wav = "root:raw:spec"+StringFromList(i, range)+":seconds"		s += sum($wav)		i += 1	while (i<N)//	printf "counting time for scans [%s, %s] is %.2f minutes\r",StringFromList(0, range),StringFromList(N-1, range),s/60	printf "counting time for scans [%s, %s] is %s\r",StringFromList(0, range),StringFromList(N-1, range),Secs2Time(s,5,0)	return sEndFunction MakeCaF2_bkgWavesMono()	if (exists("root:Packages:inelasticUtility:CaF2BkgMono:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2BkgMono:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2BkgMono		// ensure that the folder exists	Variable x0=0.123														// center of the CaF2 curve	Variable switchPoint=3.8												// place to switch between + and -	Make/N=75/O root:Packages:inelasticUtility:CaF2BkgMono:CaF_dE, root:Packages:inelasticUtility:CaF2BkgMono:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2BkgMono:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2BkgMono:CaF	CaF_dE[0,19] = {-30,-25,-20,-15,-10,-9,-8.5,-8,-7.5,-7,-6.5,-6,-5.5,-5,-4.5,-4,-3.5,-3,-2.5,-2}	CaF_dE[20,38] = {-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.1,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1}	CaF_dE[39,54] = {0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5}	CaF_dE[55,74] = {1.6,1.7,1.8,1.9,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5}	CaF[0,6] = {3.01691e-07,9.03085e-07,9.02829e-07,1.10347e-06,3.51108e-06,4.51362e-06,5.01498e-06}	CaF[7,13] = {4.81437e-06,6.41927e-06,5.6168e-06,7.32212e-06,8.0243e-06,9.8302e-06,1.16374e-05}	CaF[14,20] = {1.3747e-05,1.7761e-05,2.54913e-05,3.54174e-05,4.8352e-05,7.56332e-05,8.98729e-05}	CaF[21,27] = {9.38817e-05,0.00011776,0.000156671,0.000177256,0.00022047,0.000298496,0.00038596}	CaF[28,34] = {0.000535826,0.000874505,0.00151864,0.00276485,0.00554025,0.0100173,0.0142302}	CaF[35,42] = {0.0198608,0.0256584,0.0301872,0.0336351,0.0365415,0.0379319,0.03768,0.0362804}	CaF[43,50] = {0.0338387,0.0283272,0.0230089,0.0159361,0.0104685,0.00580136,0.00280002,0.00150752}	CaF[51,57] = {0.00083529,0.000543429,0.000404835,0.000280259,0.000230898,0.000192387,0.000163498}	CaF[58,64] = {0.000143431,0.000116448,6.46826e-05,4.26946e-05,3.13002e-05,2.45998e-05,1.89417e-05}	CaF[65,71] = {1.37041e-05,1.24798e-05,1.03132e-05,9.04919e-06,8.68797e-06,7.90557e-06,7.78509e-06}	CaF[72,74] = {6.76183e-06,6.4804e-06,6.37855e-06}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=2 (1/Å), from 'caf1', May03, original name was ;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2BkgWavesMonoDec()	if (exists("root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2BkgWavesMonoDec	// ensure that the folder exists	Variable x0=  0.34														// center of the CaF2 curve	Variable switchPoint=7.5												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF_dE, root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:CaF	CaF[0]= {2.08285e-05,2.09055e-05,2.10705e-05,2.11967e-05,2.12512e-05,2.13931e-05,2.1911e-05,2.30408e-05,2.4805e-05,2.69706e-05,2.99e-05,3.09707e-05,3.23373e-05,3.34076e-05,3.44663e-05,3.57283e-05,3.67558e-05}	CaF[17]= {3.83918e-05,4.06378e-05,4.30664e-05,4.68676e-05,5.19102e-05,5.67301e-05,6.61288e-05,8.75278e-05,0.000113313,0.000150119,0.000200961,0.000289392,0.000574685,0.002166,0.0136731,0.0290344,0.0422592}	CaF[34]= {0.0496176,0.0518812,0.0395469,0.0171955,0.00366455,0.000988701,0.000417914,0.000226403,0.000160725,0.000128124,0.000108097,9.0278e-05,7.30365e-05,6.02144e-05,5.21731e-05,4.57258e-05,4.12e-05,3.95e-05}	CaF[52]= {3.8325e-05,3.72677e-05,3.61003e-05,3.51079e-05,3.43332e-05,3.38442e-05,3.36196e-05,3.35631e-05}	CaF_dE[0]= {-60,-55,-50,-45,-40,-35,-30,-25,-20,-15,-10,-9,-8.5,-8,-7.5,-7,-6.5,-6,-5.5,-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.7,-1.45,-1.2,-0.9,-0.6,-0.35,-0.15,0.05,0.25,0.45,0.7,0.95,1.2,1.45,1.7,2,2.25,2.5,2.75}	CaF_dE[45]= {3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=4 (1/Å), from 'caf7', Dec04, scan 1, UN-re-tuned;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkgWaves004channel()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004channel:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004channel:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004channel		// ensure that the folder exists	Variable x0=0.0515														// center of the CaF2 curve	Variable switchPoint=3.1												// place to switch between + and -	Make/N=55/O root:Packages:inelasticUtility:CaF2Bkg004channel:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004channel:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004channel:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004channel:CaF	CaF_dE[0,19] = {-30,-25,-20,-15,-10,-9,-7.5,-6,-5.5,-5,-4.75,-4.5,-4.25,-4,-3.75,-3.5,-3.25,-3,-2.75,-2.5}	CaF_dE[20,39] = {-2.25,-2,-1.75,-1.5,-1.25,-1,-0.75,-0.5,-0.25,0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5}	CaF_dE[40,54] = {2.75,3,3.25,3.5,3.75,4,4.25,4.5,4.75,5,6,7,8,9,10}	CaF[0,6] = {7.95349e-06,2.38081e-05,2.38013e-05,2.90908e-05,9.25627e-05,0.000118993,0.000153894}	CaF[7,14] = {0.000211545,0.000259154,0.000320983,0.00035,0.00036,0.000381,0.000383445,0.000422679}	CaF[15,21] = {0.000461913,0.000495293,0.00055,0.000614447,0.000668171,0.000812061,0.000929693}	CaF[22,29] = {0.0010967,0.00143675,0.00187098,0.00305786,0.00683668,0.0400032,0.34595,0.625702}	CaF[30,37] = {0.503875,0.120087,0.0103008,0.00440194,0.00236859,0.00168393,0.00132932,0.00103605}	CaF[38,44] = {0.000842709,0.00072216,0.000627733,0.000553557,0.000482405,0.000468599,0.000454792}	CaF[45,51] = {0.000418473,0.000396706,0.000352952,0.000328357,0.000310915,0.000293473,0.00024265}	CaF[52,54] = {0.00026585,0.0002456,0.000231016}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=2 (1/Å), from 'caf4', Apr04, original name was ;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_004_111channel()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004111channel	// ensure that the folder exists	Variable x0=  0.0396													// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004111channel:CaF	CaF_dE[0]= {-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8}	CaF_dE[49]= {3.9,4,4.02}	CaF[0]= {1.8845004888135e-05,2.06003605853766e-05,2.41006728174398e-05,3.44995169143658e-05,4.51706546300557e-05,8.941375563154e-05,0.000214821571717039,0.000588288181461394,0.00168612867128104,0.00356174213811755}	CaF[10]= {0.00670584477484226,0.00708900997415185,0.00264338357374072,0.000504012568853796,0.000169583669048734,8.166106272256e-05,6.12751973676495e-05,4.1182225686498e-05,3.34261239913758e-05,2.23694823944243e-05}	CaF[20]= {1.72204454429448e-05,1.3286807188706e-05,1.24881198644289e-05,1.10446890175808e-05,9.84334019449307e-06,8.94609820534242e-06,7.40497398510342e-06,6.01103101871558e-06,5.64795891477843e-06}	CaF[29]= {5.42464022146305e-06,4.45389969172538e-06,4.62088974018116e-06,4.13563520851312e-06,3.23578160532634e-06,3.2471743907081e-06,3.88565331377322e-06,3.27579596159921e-06,2.78499305750302e-06}	CaF[38]= {2.21631216845708e-06,2.2754063593311e-06,2.13220869227371e-06,2.3281027097255e-06,1.79151390966581e-06,1.85419969511713e-06,1.72896727690386e-06,1.98884004021238e-06,2.13780367630534e-06}	CaF[47]= {1.0391752311989e-06,8.37673098885716e-07,1.70236444319016e-06,2.03582135327451e-06,8.37673098885716e-07}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=3.5 & 4 (1/Å), from 'caf5', July04, scans 4-7;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_004_111channelDec0()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004111channelDec0	// ensure that the folder exists	Variable x0=  0.0035													// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004111channelDec0:CaF	CaF_dE[0]= {-4.00021,-4,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9}	CaF_dE[46]= {3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25}	CaF[0]= {0.00103755,0.00125567,0.00109061,0.00139716,0.00163886,0.00205152,0.00350763,0.00334257,0.00494606,0.00632553,0.00899015,0.0187821,0.0460355,0.157177,0.293627,0.693887,1,0.735648,0.176083,0.0514237}	CaF[20]= {0.021429,0.0134528,0.00850086,0.00537051,0.00413842,0.00343689,0.00277074,0.00254672,0.00226375,0.00221069,0.00201615,0.00162118,0.00166834,0.00157401,0.00173908,0.00160349,0.00146201,0.00143253}	CaF[38]= {0.00130873,0.00124388,0.00141484,0.00125567,0.00130873,0.00116725,0.00132052,0.00142074,0.00113777,0.00119672,0.00127925,0.00129694,0.00117314,0.00096681,0.00120262,0.00119083,0.00113777,0.00102576}	CaF[56]= {0.00106703,0.00103166,0.00113777,0.00112598,0.00115546,0.00110829,0.00104934,0.00119083,0.00107882,0.000943229}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=4 (1/Å), from 'caf6', Dec04, scan 1, not re-tuned;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_004_111channelDec1()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004111channelDec1	// ensure that the folder exists	Variable x0=  0.022													// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004111channelDec1:CaF	CaF_dE[0]= {-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1}	CaF_dE[48]= {3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10}	CaF[0]= {0.00119021,0.0010111,0.00151376,0.00135198,0.00169865,0.00199909,0.00338574,0.00391151,0.00433906,0.00537327,0.00714703,0.0146754,0.0466319,0.131593,0.349124,0.634288,1,0.996545,0.364325,0.0613362}	CaF[20]= {0.0247575,0.0119021,0.00911145,0.00576038,0.00494572,0.00343196,0.00296974,0.00271552,0.00233419,0.00227064,0.00187198,0.00206264,0.00181998,0.00172176,0.00173909,0.0016062,0.0015022,0.00149643}	CaF[38]= {0.00143865,0.00138087,0.00141554,0.00132887,0.00125376,0.00125954,0.00124221,0.0012191,0.00116132,0.0011151,0.00128843,0.00112088,0.00113243,0.00101688,0.00118443,0.00120754,0.00123643,0.00117865}	CaF[56]= {0.00120176,0.00123643,0.00105732,0.00105732,0.000993766,0.00101688,0.00110932,0.00105154,0.00102843,0.00110932,0.00109199,0.000999544,0.000918656,0.000878212,0.000930211,0.000993766,0.000970655}	CaF[73]= {0.0010631,0.000808879,0.00100532,0.000999544,0.0010111,0.00101688,0.00118443,0.00108621}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=4 (1/Å), from 'caf6', Dec04, scan 8, re-tuned;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_004_111channelDec2()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004111channelDec2	// ensure that the folder exists	Variable x0=  0.021													// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004111channelDec2:CaF	CaF[0]= {0.000325046,0.000298832,0.000456113,0.000477083,0.000839637,0.00230678,0.00285134,0.00293623,0.00316866,0.00356411,0.00418374,0.00483847,0.00504617,0.00646855,0.00776547,0.0147487,0.0253573,0.0416769}	CaF[18]= {0.0617655,0.11897,0.207072,0.323352,0.427459,0.615468,0.823822,0.95238,1,0.918268,0.679274,0.351365,0.146613,0.0475825,0.0432692,0.0243625,0.0160082,0.0114136,0.00978973,0.00780986,0.00628013}	CaF[39]= {0.00526056,0.00490519,0.00407571,0.00342771,0.00279015,0.00238666,0.00204905,0.00197474,0.00181855,0.00169182,0.00152959,0.00145951,0.00137358,0.00126433,0.00118221,0.0011117,0.00105086,0.000997584}	CaF[57]= {0.00095034,0.00090839,0.000871661,0.000840639,0.000815998,0.000797593,0.000783428,0.000769951,0.000754055,0.000735264,0.000715848,0.000698386,0.000682957,0.000666695,0.000646241,0.000620833,0.000593274}	CaF[74]= {0.000568003,0.000548021,0.000533218,0.000521226,0.000509664,0.00049773,0.000486093,0.000475708,0.000466861,0.000459105,0.000451776,0.000444495,0.000437394,0.000431076,0.000426306,0.000423455,0.000421959}	CaF[91]= {0.000420311,0.0004168,0.000410507,0.00040166,0.00039114,0.000379802,0.000368346,0.000357503,0.000347859,0.000339349,0.000331229,0.00032288,0.000314623,0.000307461,0.000301919,0.000297291,0.000292155}	CaF[108]= {0.000285599,0.000277914,0.00027027,0.000263813,0.000258905,0.000254896,0.000250542,0.0002449,0.00023816,0.000231809,0.000227905}	CaF_dE[0]= {-4,-3.5,-3,-2.5,-2.00005,-1,-0.95,-0.9,-0.85,-0.8,-0.75,-0.7,-0.65,-0.6,-0.55,-0.5,-0.45,-0.4,-0.35,-0.3,-0.25,-0.2,-0.15,-0.1,-0.05,0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65}	CaF_dE[39]= {0.7,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,1.35,1.4,1.45,1.5,1.55,1.6,1.65,1.7,1.75,1.8,1.85,1.9,1.95,2,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5,2.55,2.6,2.65,2.7,2.75,2.8}	CaF_dE[82]= {2.85,2.9,2.95,3,3.05,3.1,3.15,3.2,3.25,3.3,3.35,3.4,3.45,3.5,3.55,3.6,3.65,3.7,3.75,3.8,3.85,3.9,3.95,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=4 (1/Å), from 'caf7', Dec04, scan 1, UN-re-tuned;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeLiF_bkg_004_111channelMar4()	if (exists("root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF_dE")==1 && exists("root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:LiFBkg004111channelMar4	// ensure that the folder exists	Variable x0=  0.0289													// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF_dE, root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF	Wave CaF_dE = root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF_dE	Wave CaF = root:Packages:inelasticUtility:LiFBkg004111channelMar4:CaF	CaF[0]= {3.3e-05,3.5e-05,3.6e-05,3.7e-05,5e-05,7.41321e-05,7.6565e-05,0.00010136,9.42213e-05,0.000132372,0.000127239,0.000151746,0.00016514,0.000209444,0.00028287,0.000414281,0.00064436,0.000680807,0.000727579}	CaF[19]= {0.000772503,0.000931626,0.000978954,0.00115741,0.00145443,0.00180184,0.00202147,0.00218124,0.00256726,0.00325477,0.00462631,0.00852904,0.0138642,0.0285052,0.0619192,0.175385,0.533295,1,0.735892}	CaF[38]= {0.428329,0.120722,0.0334675,0.0172443,0.0110447,0.00617376,0.00399877,0.00321909,0.00292079,0.00218887,0.00196276,0.00155197,0.00125284,0.00113062,0.000990006,0.000893233,0.000815915,0.000754733}	CaF[56]= {0.000660152,0.000414281,0.00028287,0.000209444,0.00016514,0.000151746,0.000127239,0.000132372,9.42213e-05,0.00010136,7.6565e-05,7.41321e-05,5e-05,3.7e-05,3.6e-05,3.5e-05,3.3e-05}	CaF_dE[0]= {-10,-9.5,-9,-8.5,-8,-7.5,-7,-6.5,-6,-5.5,-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.1,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8}	CaF_dE[45]= {0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=4 (1/Å), from 'lif1', Mar04, scans 28,29,31'"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_004_111_Oct05()	if (exists("root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2Bkg004111Oct05	// ensure that the folder exists	Variable x0=  -0.0047379												// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF_dE, root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2Bkg004111Oct05:CaF  	CaF_dE[0]= {-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1}	CaF_dE[48]= {3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10}  	CaF[0]= {1.12768e-07,1.16318e-07,2.09862e-07,1.4644e-07,4.35065e-07,1.00526e-06,2.28067e-06,2.78031e-06,3.45619e-06,4.40778e-06,5.95552e-06,1.05827e-05,2.05806e-05,9.01294e-05,0.00039584,0.000767472,0.000902075}	CaF[17]= {0.000723038,0.000359992,7.45832e-05,1.62393e-05,9.61514e-06,5.68963e-06,4.22091e-06,3.28878e-06,2.61999e-06,2.12227e-06,1.7423e-06,1.44617e-06,1.21164e-06,1.02365e-06,8.7173e-07,7.48391e-07,6.4812e-07}	CaF[34]= {5.6673e-07,5.00933e-07,4.48061e-07,4.05879e-07,3.72461e-07,3.46116e-07,3.25336e-07,3.08775e-07,2.95229e-07,2.83639e-07,2.73092e-07,2.62826e-07,2.52231e-07,2.40858e-07,2.28416e-07,2.14768e-07,1.99925e-07}	CaF[51]= {1.8403e-07,1.67344e-07,1.50224e-07,1.33098e-07,1.16437e-07,1.00729e-07,6.86329e-08,5.11485e-08,5.04294e-08,6.39817e-08,8.51499e-08,1.0503e-07,1.15313e-07,1.11192e-07,9.33358e-08,6.80436e-08,4.5199e-08}	CaF[68]= {3.43798e-08,4.03346e-08,4.19281e-08,3.92709e-08,3.68584e-08,3.46616e-08,3.26554e-08,3.08184e-08,2.91321e-08,2.75806e-08,2.61497e-08,2.48273e-08,2.36028e-08}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=3.75 (1/Å), from 'caf10', Oct05, scan 5-6;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction MakeCaF2_bkg_Oct05()	if (exists("root:Packages:inelasticUtility:CaF2BkgOct05:CaF_dE")==1 && exists("root:Packages:inelasticUtility:CaF2BkgOct05:CaF")==1)		return 0				// waves already exist, do nothing	endif	if (!DataFolderExists("root:Packages:inelasticUtility:"))		return 1				// need to init the other package first	endif	NewDataFolder /O root:Packages:inelasticUtility:CaF2BkgOct05	// ensure that the folder exists	Variable x0=  -0.0047379												// center of the CaF2 curve	Variable switchPoint=Inf												// place to switch between + and -	Make/N=2/O root:Packages:inelasticUtility:CaF2BkgOct05:CaF_dE, root:Packages:inelasticUtility:CaF2BkgOct05:CaF	Wave CaF_dE = root:Packages:inelasticUtility:CaF2BkgOct05:CaF_dE	Wave CaF = root:Packages:inelasticUtility:CaF2BkgOct05:CaF//	CaF_dE[0]= {-8,-7,-6,-5,-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7}//	CaF_dE[48]= {3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10}////	CaF[0]= {3.42227e-06,4.15732e-06,5.29208e-06,7.18363e-06,1.07095e-05,1.37625e-05,1.8582e-05,2.69313e-05,4.36975e-05,9.07547e-05,0.000346125,0.000742063,0.001138,0.00267519,0.00421237,0.00706981,0.00992725}//	CaF[17]= {0.0127415,0.0155557,0.0172386,0.0189214,0.0195553,0.0201891,0.0192352,0.0182812,0.0150769,0.0118725,0.00852394,0.00517537,0.00326938,0.00136337,0.000902563,0.00044175,0.000325943,0.000210136,0.000165878}//	CaF[36]= {0.00012162,0.000102021,8.2422e-05,7.16096e-05,6.07972e-05,5.43765e-05,4.79558e-05,4.27542e-05,3.87717e-05,3.47892e-05,3.2115e-05,2.94409e-05,2.05136e-05,1.92584e-05,1.81644e-05,1.70705e-05,1.61998e-05}//	CaF[53]= {1.53291e-05,1.45384e-05,1.38277e-05,1.3117e-05,1.16364e-05,1.03815e-05,9.3037e-06,8.3688e-06,7.55214e-06,6.83578e-06,6.20637e-06,5.65375e-06,5.17003e-06,4.74879e-06,4.38466e-06,4.0729e-06,3.80913e-06}//	CaF[70]= {3.58912e-06,3.40862e-06,3.26325e-06,3.14837e-06,3.05907e-06,2.99003e-06,2.93551e-06,2.88933e-06,2.84481e-06,2.79472e-06,2.73134e-06}//	CaF_dE[0]= {-18,-16,-14,-12,-10,-9,-8,-7,-6,-5,-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2}//	CaF_dE[49]= {2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10,10.5,11,12,13,14,15,20,25}//	CaF_dE[99]= {30}////	CaF[0]= {1.49368e-06,1.62029e-06,1.80471e-06,2.08842e-06,2.55822e-06,2.91858e-06,3.42227e-06,4.15732e-06,5.29208e-06,7.18363e-06,1.07095e-05,1.37625e-05,1.8582e-05,2.69313e-05,4.36975e-05,9.07547e-05,0.000346125}//	CaF[17]= {0.000742063,0.001138,0.00267519,0.00421237,0.00706981,0.00992725,0.0127415,0.0155557,0.0172386,0.0189214,0.0195553,0.0201891,0.0192352,0.0182812,0.0150769,0.0118725,0.00852394,0.00517537,0.00326938}//	CaF[36]= {0.00136337,0.000902563,0.00044175,0.000325943,0.000210136,0.000165878,0.00012162,0.000102021,8.2422e-05,7.16096e-05,6.07972e-05,5.43765e-05,4.79558e-05,4.27542e-05,3.87717e-05,3.47892e-05,3.2115e-05}//	CaF[53]= {2.94409e-05,2.71524e-05,2.52496e-05,2.33468e-05,2.19302e-05,2.05136e-05,1.92584e-05,1.81644e-05,1.70705e-05,1.61998e-05,1.53291e-05,1.45384e-05,1.38277e-05,1.3117e-05,1.16364e-05,1.03815e-05,9.3037e-06}//	CaF[70]= {8.3688e-06,7.55214e-06,6.83578e-06,6.20637e-06,5.65375e-06,5.17003e-06,4.74879e-06,4.38466e-06,4.0729e-06,3.80913e-06,3.58912e-06,3.40862e-06,3.26325e-06,3.14837e-06,3.05907e-06,2.99003e-06,2.93551e-06}//	CaF[87]= {2.88933e-06,2.84481e-06,2.79472e-06,2.73134e-06,2.57687e-06,2.44344e-06,2.2258e-06,2.05725e-06,1.92405e-06,1.81695e-06,1.50229e-06,1.3578e-06,1.27967e-06}	CaF_dE[0]= {-18,-16,-14,-12,-10,-9,-8,-7,-6,-5,-4,-3.5,-3,-2.5,-2,-1.5,-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2}	CaF_dE[49]= {2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,10,10.5,11,12,13,14,15,20,25}	CaF_dE[99]= {30}	CaF[0]= {4.95663e-07,6.26601e-07,8.17301e-07,1.11064e-06,1.59632e-06,1.9688e-06,2.48934e-06,3.24881e-06,4.42084e-06,6.37343e-06,1.00095e-05,1.31542e-05,1.81116e-05,2.668e-05,4.38114e-05,9.13266e-05,0.000346125}	CaF[17]= {0.000742063,0.001138,0.00267519,0.00421237,0.00706981,0.00992725,0.0127415,0.0155557,0.0172386,0.0189214,0.0195553,0.0201891,0.0192352,0.0182812,0.0150769,0.0118725,0.00852394,0.00517537,0.00326938}	CaF[36]= {0.00136337,0.000902563,0.00044175,0.000326399,0.000211047,0.000167223,0.0001234,0.000103501,8.36025e-05,7.24552e-05,6.13078e-05,5.46096e-05,4.79115e-05,4.24668e-05,3.82757e-05,3.40846e-05,3.12598e-05}	CaF[53]= {2.8435e-05,2.60193e-05,2.40126e-05,2.20059e-05,2.05232e-05,1.90404e-05,1.77342e-05,1.66044e-05,1.54746e-05,1.45923e-05,1.37099e-05,1.29171e-05,1.22138e-05,1.15105e-05,1.00848e-05,8.91195e-06,7.93473e-06}	CaF[70]= {7.11155e-06,6.41134e-06,5.81058e-06,5.29114e-06,4.83888e-06,4.44262e-06,4.09342e-06,3.78407e-06,3.5087e-06,3.26248e-06,3.04142e-06,2.8422e-06,2.66201e-06,2.49849e-06,2.34965e-06,2.21377e-06,2.08938e-06}	CaF[87]= {1.97522e-06,1.8702e-06,1.77336e-06,1.68387e-06,1.52413e-06,1.38613e-06,1.16104e-06,9.86711e-07,8.48938e-07,7.3816e-07,4.12683e-07,2.63213e-07,1.82387e-07}	WaveStats/Q CaF	CaF /= V_max	Note/K CaF_dE	Note/K CaF	String noteStr = ""	noteStr = ReplaceNumberByKey("x0",noteStr,x0)	noteStr = ReplaceNumberByKey("switchPoint",noteStr,switchPoint)	noteStr += "CaF2 background, Q=3.5 (1/Å), from 'caf10', Oct05, scan 69;"	Note CaF_dE, noteStr+"dE;"	Note CaF, noteStr+"Det;"	return 0EndFunction ReTargetDataFile(fName)	String fName	if (strlen(fName)<1)		fName=StrVarOrDefault("root:Packages:spec:specDefaultFile","")		fName = SelectString(strlen(fName)<1,fName,IgorInfo(1))		Prompt fName,"data file name (no extension)"		DoPrompt "new data file name", fName		if (V_Flag)			return 1		endif	endif	SVAR specDefaultFile=root:Packages:spec:specDefaultFile	specDefaultFile=fNameEndFunction InitInelasticIgorFile(short)	Variable short					// only load procedures, do not make globals, etc.	Execute/P "INSERTINCLUDE  \"PhysicalConstants\""	Execute/P "COMPILEPROCEDURES "	Execute/P "PhysicalConstantsInitPackage()"	Execute/P "DELETEINCLUDE  \"PhysicalConstants\""	Execute/P "COMPILEPROCEDURES "	ElementDataInitPackage()	specInitPackage()	inelasticInitPackage()	DefaultFont/U "Helvetica"	if (short==1)		return 0	elseif (short==2)		if (exists("root:Packages:inelasticUtility:scaleFactor")==2)		// already run			return 0		endif	elseif(short!=0)		Abort "called InitInelasticIgorFile("+num2str(short)+"), it must 0, 1, or 2"	endif	NewPath /M="path to the raw data file" raw	NVAR lastScan=root:Packages:spec:lastScan	NVAR extraProcess=root:Packages:spec:extraProcess	NVAR firstScanNumInFile=root:Packages:spec:firstScanNumInFile	SVAR specDefaultPath=root:Packages:spec:specDefaultPath	SVAR specDataFolder=root:Packages:spec:specDataFolder	SVAR specScanPositions=root:Packages:spec:specScanPositions	SVAR specScanPositionsID=root:Packages:spec:specScanPositionsID	SVAR userName=root:Packages:spec:userName	SVAR unixPath=root:Packages:spec:unixPath	lastScan = 0	extraProcess = 0	firstScanNumInFile = 1	specDefaultPath="raw"	specDataFolder="root:raw:"	if (!DataFolderExists(specDataFolder))		String fldr=specDataFolder		Variable N=strlen(fldr)		if (stringmatch(fldr[N-1],":"))			fldr = fldr[0,N-2]		endif		NewDataFolder $fldr	endif	specScanPositions=""	specScanPositionsID=""	userName="tischler"	unixPath="tex.uni.aps.anl.gov/home/tischler/data/"	ReTargetDataFile("")	if (exists("root:Packages:inelasticUtility:doPlotting")!=2)		Variable /G root:Packages:inelasticUtility:doPlotting=1		// automaticall do plotting	endif	if (exists("root:Packages:inelasticUtility:tailPower")!=2)		Variable /G root:Packages:inelasticUtility:tailPower=-3		// tail power for calculating first moment	endif	if (exists("root:Packages:inelasticUtility:scaleFactor")!=2)		Variable /G root:Packages:inelasticUtility:scaleFactor=1		// default scale factor	endif	if (exists("root:Packages:inelasticUtility:darkIo")!=2)		Variable /G root:Packages:inelasticUtility:darkIo=0			// dark current in the Io, DO NOT use this, use spec dark_Io_Name	endif	if (exists("root:Packages:inelasticUtility:doFTP")!=2)		Variable /G root:Packages:inelasticUtility:doFTP=0			// use FTP for getting data file	endif	NVAR doPlotting=root:Packages:inelasticUtility:doPlotting	NVAR scaleFactor=root:Packages:inelasticUtility:scaleFactor//	NVAR darkIo=root:Packages:inelasticUtility:darkIo	NVAR tailPower=root:Packages:inelasticUtility:tailPower	NVAR doFTP=root:Packages:inelasticUtility:doFTP	SVAR dark_Io_Name=root:Packages:spec:dark_Io_Name	Variable doPlotting_ask=doPlotting	Variable scaleFactor_ask=scaleFactor//	Variable darkIo_ask=darkIo	String darkIo_ask=dark_Io_Name	darkIo_ask = SelectString(strlen(darkIo_ask),"dark5",darkIo_ask)	// use "dark5" as the default	Variable tailPower_ask=tailPower	Variable doFTP_ask=doFTP+1	Prompt doPlotting_ask, "draw plots automatically", popup, "draw plots;no plots"	Prompt scaleFactor_ask, "default scale factor to use"	Prompt darkIo_ask, "pv with dark current to use, usually  dark5"	Prompt tailPower_ask, "tail power to use"	Prompt doFTP_ask, "use FTP to get new data",popup,"No;Yes"	DoPrompt "parameters", doPlotting_ask,scaleFactor_ask,darkIo_ask,tailPower_ask,doFTP_ask	doPlotting_ask = doPlotting_ask==1	scaleFactor = scaleFactor_ask	dark_Io_Name = darkIo_ask	tailPower = tailPower_ask	doFTP = doFTP_ask-1	// default range for plots	if (exists("root:Packages:inelasticUtility:defaultXlo")!=2)		Variable /G root:Packages:inelasticUtility:defaultXlo=-10	endif	if (exists("root:Packages:inelasticUtility:defaultXhi")!=2)		Variable /G root:Packages:inelasticUtility:defaultXhi=60	endif	if (exists("root:Packages:inelasticUtility:defaultYlo")!=2)		Variable /G root:Packages:inelasticUtility:defaultYlo=0	endif	if (exists("root:Packages:inelasticUtility:defaultYhi")!=2)		Variable /G root:Packages:inelasticUtility:defaultYhi=.2	endif	NVAR defaultXlo=root:Packages:inelasticUtility:defaultXlo	NVAR defaultXhi=root:Packages:inelasticUtility:defaultXhi	NVAR defaultYlo=root:Packages:inelasticUtility:defaultYlo	NVAR defaultYhi=root:Packages:inelasticUtility:defaultYhi	Variable Xlo=defaultXlo, Xhi=defaultXhi	Variable Ylo=defaultYlo, Yhi=defaultYhi	Prompt Xlo, "default lower x-axis"	Prompt Xhi, "default upper x-axis"	Prompt Ylo, "default lower y-axis"	Prompt Yhi, "default upper y-axis"	DoPrompt "plot range", Xlo,Xhi,Ylo,Yhi	defaultXlo = Xlo	defaultXhi = Xhi	defaultYlo = Ylo	defaultYhi = Yhi	if (MakeCaF2_bkgWavesMono())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2BkgMono:'\r\r"	endif	if (MakeCaF2_bkgWaves004channel())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2Bkg004channel:'\r\r"	endif	if (MakeCaF2_bkg_004_111channel())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2Bkg004channel:'\r\r"	endif	if (MakeCaF2_bkg_004_111channelDec0())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2_bkg_004_111channelDec0:'\r\r"	endif	if (MakeCaF2_bkg_004_111channelDec1())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2_bkg_004_111channelDec1:'\r\r"	endif	if (MakeCaF2_bkg_004_111channelDec2())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2_bkg_004_111channelDec2:'\r\r"	endif	if (MakeLiF_bkg_004_111channelMar4())		DoAlert 0, "problem making the LiF background files"		printf "\rthere was a problem making the LiF background files, check 'root:Packages:inelasticUtility:MakeLiF_bkg_004_111channelMar4:'\r\r"	endif	if (MakeCaF2_bkg_004_111_Oct05())		DoAlert 0, "problem making the LiF background files"		printf "\rthere was a problem making the LiF background files, check 'root:Packages:inelasticUtility:MakeCaF2_bkg_004_111_Oct05:'\r\r"	endif	if (MakeCaF2_bkg_Oct05())		DoAlert 0, "problem making the LiF background files"		printf "\rthere was a problem making the LiF background files, check 'root:Packages:inelasticUtility:MakeCaF2_bkg_Oct05:'\r\r"	endif	if (MakeCaF2BkgWavesMonoDec())		DoAlert 0, "problem making the CaF2 background files"		printf "\rthere was a problem making the CaF2 background files, check 'root:Packages:inelasticUtility:CaF2BkgWavesMonoDec:'\r\r"	endif	if (exists("root:Packages:inelasticUtility:lastBkg")!=2)		String /G root:Packages:inelasticUtility:lastBkg="CaF2BkgMono"	endif	String bkg = ChooseNewBkgFolder("")	printf "Setting background folder to  '%s'\r",bkgEndStatic Function/T ChooseNewBkgFolder(bkgFldr)	String bkgFldr			// folder with background waves	SVAR lastBkg=root:Packages:inelasticUtility:lastBkg	if (!SVAR_Exists(lastBkg))		Abort "lastBkg does not exist, run Function 'InitInelasticIgorFile(0)'"	endif	bkgFldr = SelectString(strlen(bkgFldr),"$",bkgFldr)		// '$' is sure to be a bad folder name	bkgFldr = SelectString(DataFolderExists(bkgFldr),"root:Packages:inelasticUtility:","")+bkgFldr	bkgFldr = SelectString(DataFolderExists(bkgFldr),"$",bkgFldr)	// bkgFldr is now valid folder or ""	if (!DataFolderExists(bkgFldr))								// if no background, then prompt		String bkgList = ListOfBackgroundFolders()	// return a list of all the available CaF2 backgrounds		bkgFldr = SelectString(cmpstr(bkgFldr,"$"),lastBkg,bkgFldr)		Prompt bkgFldr, "background wave folder",popup, bkgList		DoPrompt "pick background folder", bkgFldr		if (V_Flag)			return ""		endif	endif	if (!DataFolderExists(bkgFldr) && !DataFolderExists("root:Packages:inelasticUtility:"+bkgFldr) || !strlen(bkgFldr))		print "could not find background folder: '"+bkgFldr+"'"		Abort "could not find background folder: '"+bkgFldr+"'"	endif	Variable i=0	if (strsearch(bkgFldr,"root:Packages:inelasticUtility:",0)==0)	// background in usual place, remove leading path		i = strlen("root:Packages:inelasticUtility:")	endif	bkgFldr = bkgFldr[i,Inf]	lastBkg = bkgFldr	return bkgFldrEndStatic Function/T ListOfBackgroundFolders()	// return a list of all the available CaF2 backgrounds	String item,bkgList = ""	Variable i	for(i=0;1;i+=1)		item = GetIndexedObjName("root:Packages:inelasticUtility",4,i)		if (strlen(item)<1)			break		endif		if (strsearch(item,"Bkg",0)<0)	// check that item is a background wave			continue		endif		bkgList = AddListItem(item, bkgList,";",Inf)	endfor	return bkgListEnd